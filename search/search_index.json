{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Quantum Chemistry I/O","text":"<p>Elegant and intuitive data structures for quantum chemistry, featuring seamless Jupyter Notebook visualizations.</p> <p><code>qcio</code> works in harmony with a suite of other quantum chemistry tools for fast, structured, and interoperable quantum chemistry.</p>"},{"location":"#the-qc-suite-of-programs","title":"The QC Suite of Programs","text":"<ul> <li>qcconst - NIST/CODATA2022 core physical constants, conversion factors, and a periodic table with clear source information for every value.</li> <li>qcio - Elegant and intuitive data structures for quantum chemistry, featuring seamless Jupyter Notebook visualizations. Documentation</li> <li>qccodec - A translation layer between quantum chemistry program inputs and outputs and structured <code>qcio</code> objects.</li> <li>qcop - A package for operating quantum chemistry programs using <code>qcio</code> standardized data structures. Compatible with <code>TeraChem</code>, <code>psi4</code>, <code>QChem</code>, <code>NWChem</code>, <code>ORCA</code>, <code>Molpro</code>, <code>geomeTRIC</code> and many more.</li> <li>BigChem - A distributed application for running quantum chemistry calculations at scale across clusters of computers or the cloud. Bring multi-node scaling to your favorite quantum chemistry program.</li> <li><code>ChemCloud</code> - A web application and associated Python client for exposing a BigChem cluster securely over the internet.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>For a minimal installation:</p> <pre><code>python -m pip install qcio\n</code></pre> <p>To install all extra feature such as cheminformatics and visualization tools:</p> <pre><code>python -m pip install qcio[all]\n</code></pre> <p>You may need to put <code>''</code> around the brackets in some terminals</p> <pre><code>python -m pip install 'qcio[all]'\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out the API Documentation to understand how qcio works. Take a look at the Visualizations to see how easy it is to understand your results using qcio!</p>"},{"location":"why/","title":"Why qcio?","text":"<p>Other data structure package for quantum chemistry exist such as QCElemental and Atomic Simulation Environment. I often found these libraries were too heavy weight or too feature poor for most of what I needed. I also found their APIs to be somewhat unintuitive and often cumbersome to use. <code>qcio</code> is designed to be easy to use, easy to reason about, and provide a unified format for diverse quantum chemistry calculations.</p> <p><code>qcio</code> is also the central package used by <code>qcop</code> to power interoperable quantum chemistry calculations across dozens of packages and <code>bigchem</code>, which scales QC calculations across hundreds of nodes on academic clusters or the cloud. I needed robust and reliable data structures for powering these applications. <code>qcio</code> is the result of thousands of hours of organizing quantum chemistry data into coherent data structures.</p> <p>It is my hope that you'll find <code>qcio</code> to be intuitive and delightful to use. If you have any questions please open an issue on GitHub. Pull requests welcome :)</p>"},{"location":"why/#getting-started","title":"Getting Started","text":"<p>Check out the API Documentation to understand how qcio works. Take a look at the Visualizations to see how easy it is to view your results using qcio!</p>"},{"location":"api/calctype/","title":"CalcType","text":""},{"location":"api/calctype/#qcio.CalcType","title":"qcio.CalcType","text":"<p>The Calculation type.</p> <p>Attributes:</p> Name Type Description <code>energy</code> <p>Energy calculation.</p> <code>gradient</code> <p>Gradient calculation.</p> <code>hessian</code> <p>Hessian calculation.</p> <code>optimization</code> <p>Geometry optimization (to a minima).</p> <code>transition_state</code> <p>Transition state optimization (to a saddle point).</p> <code>conformer_search</code> <p>Conformer search.</p>"},{"location":"api/files/","title":"Files","text":"<p>A <code>File</code> object is rarely used directly by end users, but it is a common base class for <code>Input</code> and <code>Data</code> structures that may contain files. The <code>File</code> object enables transparent serialization of binary file data for serialization to <code>.json</code>, <code>.yaml</code>, or <code>.toml</code> which makes saving data structures to disk in a human-readable format or sending them over HTTP seamless even when they contain binary data.</p>"},{"location":"api/files/#qcio.Files","title":"qcio.Files","text":"<p>File model for handling string and binary data.</p> <p>Binary data is encoded as base64 strings during serialization.</p> <p>Attributes:</p> Name Type Description <code>files</code> <code>dict[str, str | bytes]</code> <p>A dict mapping filename to str or bytes data.</p>"},{"location":"api/files/#qcio.Files.add_file","title":"add_file","text":"<pre><code>add_file(\n    filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None\n</code></pre> <p>Add a file to the object. The file will be added at to the <code>files</code> attribute     with the filename as the key and the file data as the value.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to the file.</p> required <code>relative_dir</code> <code>Path | None</code> <p>The directory to make the file relative to. Helpful when adding files from a subdirectory.</p> <code>None</code> Example <pre><code>    my_obj.add_file(\"path/to/file.txt\")\n    print(my_obj.files)\n    # Output: {\"file.txt\": \"file data\"}\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_file(\n    self, filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None:\n    \"\"\"Add a file to the object. The file will be added at to the `files` attribute\n        with the filename as the key and the file data as the value.\n\n    Args:\n        filepath: The path to the file.\n        relative_dir: The directory to make the file relative to. Helpful when\n            adding files from a subdirectory.\n\n    Example:\n        ```python\n            my_obj.add_file(\"path/to/file.txt\")\n            print(my_obj.files)\n            # Output: {\"file.txt\": \"file data\"}\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    raw_bytes = filepath.read_bytes()\n    try:\n        data: str | bytes = raw_bytes.decode(\"utf-8\")  # str\n    except UnicodeDecodeError:\n        data = raw_bytes  # bytes\n\n    # Set filename relative to relative_dir\n    if relative_dir:\n        filename = str(filepath.relative_to(relative_dir))\n    else:\n        filename = filepath.name\n\n    self.files[filename] = data\n    # Add files to __pydantic_fields_set__ to ensure they are included in .save()\n    self.__pydantic_fields_set__.add(\"files\")\n</code></pre>"},{"location":"api/files/#qcio.Files.add_files","title":"add_files","text":"<pre><code>add_files(\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Add all files in a directory to the object.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>StrOrPath</code> <p>The directory to add files from.</p> required <code>recursive</code> <code>bool</code> <p>Whether to recursively add files from subdirectories.</p> <code>False</code> <code>exclude</code> <code>list[str] | None</code> <p>A list of filenames to exclude from the directory.</p> <code>None</code> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_files(\n    self,\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Add all files in a directory to the object.\n\n    Args:\n        directory: The directory to add files from.\n        recursive: Whether to recursively add files from subdirectories.\n        exclude: A list of filenames to exclude from the directory.\n    \"\"\"\n    directory = Path(directory)\n    if exclude is None:\n        exclude = []\n    if recursive:\n        files = directory.rglob(\"*\")\n    else:\n        files = directory.glob(\"*\")\n    for filepath in files:\n        if filepath.is_file() and filepath.name not in exclude:\n            self.add_file(filepath, directory)\n</code></pre>"},{"location":"api/files/#qcio.Files.save_files","title":"save_files","text":"<pre><code>save_files(directory: StrOrPath = Path('.')) -&gt; None\n</code></pre> <p>Write all files to the specified directory</p> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def save_files(self, directory: StrOrPath = Path(\".\")) -&gt; None:\n    \"\"\"Write all files to the specified directory\"\"\"\n    directory = Path(directory)\n    directory.mkdir(exist_ok=True)\n    for filename, data in self.files.items():\n        mode = \"w\" if isinstance(data, str) else \"wb\"\n        filepath = directory / filename\n        # In case filename is a relative path, create the parent directories\n        filepath.parent.mkdir(exist_ok=True, parents=True)\n        filepath.open(mode).write(data)\n</code></pre>"},{"location":"api/inputs/","title":"Inputs","text":"<p>Data structures for specifying quantum chemistry calculations. The most commonly used structure is a <code>ProgramInput</code> which defines a single calculation.</p> <p>A <code>DualProgramInput</code> is used when two inputs are required for a calculation. For example, doing a geometry optimization with <code>geomeTRIC</code> while using a <code>subprogram</code> like <code>TeraChem</code> or <code>Psi4</code> to compute the gradients.</p> <p>A <code>FileInput</code> is an escape hatch that allows you to run any calculation in any QC program (or any program for that matter), even if it isn't a supported <code>CalcType</code> in <code>qcio</code> yet. You can use a <code>FileInput</code> to store the native input files (text and binary) for a QC program along with the relevant command line args. Using qcop you can submit a <code>FileInput</code> a QC program and all output files and <code>logs</code> produced by that program will be collected and returned in a user-friendly <code>Results</code> object. <code>FileInput</code> allows you to continue to use <code>qcio</code> even for calculations that haven't yet been standardized.</p>"},{"location":"api/inputs/#qcio.Inputs","title":"qcio.Inputs  <code>module-attribute</code>","text":"<pre><code>Inputs = Union[FileInput, ProgramInput, DualProgramInput]\n</code></pre>"},{"location":"api/inputs/#qcio.ProgramInput","title":"qcio.ProgramInput","text":"<pre><code>ProgramInput(**data: Any)\n</code></pre> <p>Core input for a quantum chemistry calculation. This is the most common input type.</p> <p>Attributes:</p> Name Type Description <code>calctype</code> <code>CalcType</code> <p>The type of calculation to perform.</p> <code>model</code> <code>Model</code> <p>The model for the quantum chemistry calculation.</p> <code>keywords</code> <code>Dict[str, Any]</code> <p>A dict of keywords to be passed to the program excluding model and calctype. Defaults to an empty dict.</p> <code>structure</code> <code>Structure</code> <p>The structure to be used in the calculation.</p> <code>files</code> <code>Files</code> <p>Files to be passed to the QC program.</p> <code>extras</code> <code>Dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p> Example <pre><code>from qcio.models import ProgramInput, Structure\n\nstruct = Structure.open(\"path/to/structure.xyz\")\n\nprog_inp = ProgramInput(\n    calctype = \"energy\",\n    structure = struct,\n    model = {\"method\": \"hf\", \"basis\": \"6-31G\"},\n    keywords = {\"maxsteps\": \"250\"},  # Optional\n    files = {\"file1\": b\"binary data\"}  # Optional\n)\n</code></pre> Source code in <code>src/qcio/models/inputs.py</code> <pre><code>def __init__(self, **data: Any):\n    \"\"\"Backwards compatibility for 'molecule' attribute.\"\"\"\n\n    # TODO: Remove in future versions.\n    if \"molecule\" in data:\n        warnings.warn(\n            \"Use of 'molecule' attribute is deprecated. Use 'structure' instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        data[\"structure\"] = data.pop(\"molecule\")\n    super().__init__(**data)\n</code></pre>"},{"location":"api/inputs/#qcio.ProgramInput.add_file","title":"add_file","text":"<pre><code>add_file(\n    filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None\n</code></pre> <p>Add a file to the object. The file will be added at to the <code>files</code> attribute     with the filename as the key and the file data as the value.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to the file.</p> required <code>relative_dir</code> <code>Path | None</code> <p>The directory to make the file relative to. Helpful when adding files from a subdirectory.</p> <code>None</code> Example <pre><code>    my_obj.add_file(\"path/to/file.txt\")\n    print(my_obj.files)\n    # Output: {\"file.txt\": \"file data\"}\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_file(\n    self, filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None:\n    \"\"\"Add a file to the object. The file will be added at to the `files` attribute\n        with the filename as the key and the file data as the value.\n\n    Args:\n        filepath: The path to the file.\n        relative_dir: The directory to make the file relative to. Helpful when\n            adding files from a subdirectory.\n\n    Example:\n        ```python\n            my_obj.add_file(\"path/to/file.txt\")\n            print(my_obj.files)\n            # Output: {\"file.txt\": \"file data\"}\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    raw_bytes = filepath.read_bytes()\n    try:\n        data: str | bytes = raw_bytes.decode(\"utf-8\")  # str\n    except UnicodeDecodeError:\n        data = raw_bytes  # bytes\n\n    # Set filename relative to relative_dir\n    if relative_dir:\n        filename = str(filepath.relative_to(relative_dir))\n    else:\n        filename = filepath.name\n\n    self.files[filename] = data\n    # Add files to __pydantic_fields_set__ to ensure they are included in .save()\n    self.__pydantic_fields_set__.add(\"files\")\n</code></pre>"},{"location":"api/inputs/#qcio.ProgramInput.add_files","title":"add_files","text":"<pre><code>add_files(\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Add all files in a directory to the object.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>StrOrPath</code> <p>The directory to add files from.</p> required <code>recursive</code> <code>bool</code> <p>Whether to recursively add files from subdirectories.</p> <code>False</code> <code>exclude</code> <code>list[str] | None</code> <p>A list of filenames to exclude from the directory.</p> <code>None</code> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_files(\n    self,\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Add all files in a directory to the object.\n\n    Args:\n        directory: The directory to add files from.\n        recursive: Whether to recursively add files from subdirectories.\n        exclude: A list of filenames to exclude from the directory.\n    \"\"\"\n    directory = Path(directory)\n    if exclude is None:\n        exclude = []\n    if recursive:\n        files = directory.rglob(\"*\")\n    else:\n        files = directory.glob(\"*\")\n    for filepath in files:\n        if filepath.is_file() and filepath.name not in exclude:\n            self.add_file(filepath, directory)\n</code></pre>"},{"location":"api/inputs/#qcio.ProgramInput.save_files","title":"save_files","text":"<pre><code>save_files(directory: StrOrPath = Path('.')) -&gt; None\n</code></pre> <p>Write all files to the specified directory</p> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def save_files(self, directory: StrOrPath = Path(\".\")) -&gt; None:\n    \"\"\"Write all files to the specified directory\"\"\"\n    directory = Path(directory)\n    directory.mkdir(exist_ok=True)\n    for filename, data in self.files.items():\n        mode = \"w\" if isinstance(data, str) else \"wb\"\n        filepath = directory / filename\n        # In case filename is a relative path, create the parent directories\n        filepath.parent.mkdir(exist_ok=True, parents=True)\n        filepath.open(mode).write(data)\n</code></pre>"},{"location":"api/inputs/#qcio.DualProgramInput","title":"qcio.DualProgramInput","text":"<pre><code>DualProgramInput(**data: Any)\n</code></pre> <p>Input for a two program calculation.</p> <p>Attributes:</p> Name Type Description <code>calctype</code> <code>CalcType</code> <p>The type of calculation to perform.</p> <code>model</code> <code>Model</code> <p>The model for the quantum chemistry calculation.</p> <code>keywords</code> <code>Dict[str, Any]</code> <p>A dict of keywords to be passed to the program excluding model and calctype. Defaults to an empty dict.</p> <code>structure</code> <code>Structure</code> <p>The structure to be used in the calculation.</p> <code>files</code> <code>Files</code> <p>Files to be passed to the QC program.</p> <code>subprogram</code> <code>str</code> <p>The name of the subprogram to use.</p> <code>subprogram_args</code> <code>ProgramArgs</code> <p>The ProgramArgs for the subprogram.</p> <code>extras</code> <code>Dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p> Example <pre><code>from qcio.models import DualProgramInput, ProgramArgs, Structure\n\nstruct = Structure.open(\"path/to/structure.xyz\")\n\nprog_inp = DualProgramInput(\n    calctype = \"optimization\",\n    structure = struct,\n    keywords = {\"maxiter\": \"250\"},  # Optional\n    subprogram = \"orca\",\n    subprogram_args = ProgramArgs(\n        model = {\"method\": \"wb97x-d3\", \"basis\": \"def2-SVP\"},\n        keywords = {\"convthre\": \"1e-6\"},  # Optional\n    )\n)\n</code></pre> Source code in <code>src/qcio/models/inputs.py</code> <pre><code>def __init__(self, **data: Any):\n    \"\"\"Backwards compatibility for 'molecule' attribute.\"\"\"\n\n    # TODO: Remove in future versions.\n    if \"molecule\" in data:\n        warnings.warn(\n            \"Use of 'molecule' attribute is deprecated. Use 'structure' instead.\",\n            FutureWarning,\n            stacklevel=2,\n        )\n        data[\"structure\"] = data.pop(\"molecule\")\n    super().__init__(**data)\n</code></pre>"},{"location":"api/inputs/#qcio.DualProgramInput.add_file","title":"add_file","text":"<pre><code>add_file(\n    filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None\n</code></pre> <p>Add a file to the object. The file will be added at to the <code>files</code> attribute     with the filename as the key and the file data as the value.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to the file.</p> required <code>relative_dir</code> <code>Path | None</code> <p>The directory to make the file relative to. Helpful when adding files from a subdirectory.</p> <code>None</code> Example <pre><code>    my_obj.add_file(\"path/to/file.txt\")\n    print(my_obj.files)\n    # Output: {\"file.txt\": \"file data\"}\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_file(\n    self, filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None:\n    \"\"\"Add a file to the object. The file will be added at to the `files` attribute\n        with the filename as the key and the file data as the value.\n\n    Args:\n        filepath: The path to the file.\n        relative_dir: The directory to make the file relative to. Helpful when\n            adding files from a subdirectory.\n\n    Example:\n        ```python\n            my_obj.add_file(\"path/to/file.txt\")\n            print(my_obj.files)\n            # Output: {\"file.txt\": \"file data\"}\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    raw_bytes = filepath.read_bytes()\n    try:\n        data: str | bytes = raw_bytes.decode(\"utf-8\")  # str\n    except UnicodeDecodeError:\n        data = raw_bytes  # bytes\n\n    # Set filename relative to relative_dir\n    if relative_dir:\n        filename = str(filepath.relative_to(relative_dir))\n    else:\n        filename = filepath.name\n\n    self.files[filename] = data\n    # Add files to __pydantic_fields_set__ to ensure they are included in .save()\n    self.__pydantic_fields_set__.add(\"files\")\n</code></pre>"},{"location":"api/inputs/#qcio.DualProgramInput.add_files","title":"add_files","text":"<pre><code>add_files(\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Add all files in a directory to the object.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>StrOrPath</code> <p>The directory to add files from.</p> required <code>recursive</code> <code>bool</code> <p>Whether to recursively add files from subdirectories.</p> <code>False</code> <code>exclude</code> <code>list[str] | None</code> <p>A list of filenames to exclude from the directory.</p> <code>None</code> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_files(\n    self,\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Add all files in a directory to the object.\n\n    Args:\n        directory: The directory to add files from.\n        recursive: Whether to recursively add files from subdirectories.\n        exclude: A list of filenames to exclude from the directory.\n    \"\"\"\n    directory = Path(directory)\n    if exclude is None:\n        exclude = []\n    if recursive:\n        files = directory.rglob(\"*\")\n    else:\n        files = directory.glob(\"*\")\n    for filepath in files:\n        if filepath.is_file() and filepath.name not in exclude:\n            self.add_file(filepath, directory)\n</code></pre>"},{"location":"api/inputs/#qcio.DualProgramInput.save_files","title":"save_files","text":"<pre><code>save_files(directory: StrOrPath = Path('.')) -&gt; None\n</code></pre> <p>Write all files to the specified directory</p> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def save_files(self, directory: StrOrPath = Path(\".\")) -&gt; None:\n    \"\"\"Write all files to the specified directory\"\"\"\n    directory = Path(directory)\n    directory.mkdir(exist_ok=True)\n    for filename, data in self.files.items():\n        mode = \"w\" if isinstance(data, str) else \"wb\"\n        filepath = directory / filename\n        # In case filename is a relative path, create the parent directories\n        filepath.parent.mkdir(exist_ok=True, parents=True)\n        filepath.open(mode).write(data)\n</code></pre>"},{"location":"api/inputs/#qcio.FileInput","title":"qcio.FileInput","text":"<p>File and command line argument inputs for a calculation.</p> <p>Attributes:</p> Name Type Description <code>files</code> <code>Files</code> <p>A dict mapping filename to str or bytes data.</p> <code>cmdline_args</code> <code>list[str]</code> <p>A list of command line arguments to be passed to the program.</p> <code>extras</code> <code>Dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p>"},{"location":"api/inputs/#qcio.FileInput.add_file","title":"add_file","text":"<pre><code>add_file(\n    filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None\n</code></pre> <p>Add a file to the object. The file will be added at to the <code>files</code> attribute     with the filename as the key and the file data as the value.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to the file.</p> required <code>relative_dir</code> <code>Path | None</code> <p>The directory to make the file relative to. Helpful when adding files from a subdirectory.</p> <code>None</code> Example <pre><code>    my_obj.add_file(\"path/to/file.txt\")\n    print(my_obj.files)\n    # Output: {\"file.txt\": \"file data\"}\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_file(\n    self, filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None:\n    \"\"\"Add a file to the object. The file will be added at to the `files` attribute\n        with the filename as the key and the file data as the value.\n\n    Args:\n        filepath: The path to the file.\n        relative_dir: The directory to make the file relative to. Helpful when\n            adding files from a subdirectory.\n\n    Example:\n        ```python\n            my_obj.add_file(\"path/to/file.txt\")\n            print(my_obj.files)\n            # Output: {\"file.txt\": \"file data\"}\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    raw_bytes = filepath.read_bytes()\n    try:\n        data: str | bytes = raw_bytes.decode(\"utf-8\")  # str\n    except UnicodeDecodeError:\n        data = raw_bytes  # bytes\n\n    # Set filename relative to relative_dir\n    if relative_dir:\n        filename = str(filepath.relative_to(relative_dir))\n    else:\n        filename = filepath.name\n\n    self.files[filename] = data\n    # Add files to __pydantic_fields_set__ to ensure they are included in .save()\n    self.__pydantic_fields_set__.add(\"files\")\n</code></pre>"},{"location":"api/inputs/#qcio.FileInput.add_files","title":"add_files","text":"<pre><code>add_files(\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Add all files in a directory to the object.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>StrOrPath</code> <p>The directory to add files from.</p> required <code>recursive</code> <code>bool</code> <p>Whether to recursively add files from subdirectories.</p> <code>False</code> <code>exclude</code> <code>list[str] | None</code> <p>A list of filenames to exclude from the directory.</p> <code>None</code> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_files(\n    self,\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Add all files in a directory to the object.\n\n    Args:\n        directory: The directory to add files from.\n        recursive: Whether to recursively add files from subdirectories.\n        exclude: A list of filenames to exclude from the directory.\n    \"\"\"\n    directory = Path(directory)\n    if exclude is None:\n        exclude = []\n    if recursive:\n        files = directory.rglob(\"*\")\n    else:\n        files = directory.glob(\"*\")\n    for filepath in files:\n        if filepath.is_file() and filepath.name not in exclude:\n            self.add_file(filepath, directory)\n</code></pre>"},{"location":"api/inputs/#qcio.FileInput.save_files","title":"save_files","text":"<pre><code>save_files(directory: StrOrPath = Path('.')) -&gt; None\n</code></pre> <p>Write all files to the specified directory</p> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def save_files(self, directory: StrOrPath = Path(\".\")) -&gt; None:\n    \"\"\"Write all files to the specified directory\"\"\"\n    directory = Path(directory)\n    directory.mkdir(exist_ok=True)\n    for filename, data in self.files.items():\n        mode = \"w\" if isinstance(data, str) else \"wb\"\n        filepath = directory / filename\n        # In case filename is a relative path, create the parent directories\n        filepath.parent.mkdir(exist_ok=True, parents=True)\n        filepath.open(mode).write(data)\n</code></pre>"},{"location":"api/inputs/#qcio.FileInput.from_directory","title":"from_directory  <code>classmethod</code>","text":"<pre><code>from_directory(directory: Path | str, **kwargs) -&gt; Self\n</code></pre> <p>Create a new FileInput and collect all files in the directory.</p> Source code in <code>src/qcio/models/inputs.py</code> <pre><code>@classmethod\ndef from_directory(cls, directory: Path | str, **kwargs) -&gt; Self:\n    \"\"\"Create a new FileInput and collect all files in the directory.\"\"\"\n    obj = cls(**kwargs)\n    directory = Path(directory)\n    obj.add_files(directory)\n    return obj\n</code></pre>"},{"location":"api/inputs/#qcio.ProgramArgs","title":"qcio.ProgramArgs","text":"<p>Core arguments for a calculation without a calctype or structure.</p> <p>This class is used by <code>DualProgramInput</code> or multi-step calculations to specify <code>subprogram_args</code> or basic program arguments for a multistep algorithm in BigChem. It is not intended to be used directly for single-step calculations since it lacks a <code>calctype</code> and <code>structure</code>.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>Model</code> <p>The model for the quantum chemistry calculation.</p> <code>keywords</code> <code>Dict[str, Any]</code> <p>A dict of keywords to be passed to the program excluding model and calctype. Defaults to an empty dict.</p> <code>files</code> <code>Files</code> <p>Files to be passed to the QC program.</p> <code>extras</code> <code>Dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p>"},{"location":"api/inputs/#qcio.ProgramArgs.add_file","title":"add_file","text":"<pre><code>add_file(\n    filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None\n</code></pre> <p>Add a file to the object. The file will be added at to the <code>files</code> attribute     with the filename as the key and the file data as the value.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to the file.</p> required <code>relative_dir</code> <code>Path | None</code> <p>The directory to make the file relative to. Helpful when adding files from a subdirectory.</p> <code>None</code> Example <pre><code>    my_obj.add_file(\"path/to/file.txt\")\n    print(my_obj.files)\n    # Output: {\"file.txt\": \"file data\"}\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_file(\n    self, filepath: Path | str, relative_dir: Path | None = None\n) -&gt; None:\n    \"\"\"Add a file to the object. The file will be added at to the `files` attribute\n        with the filename as the key and the file data as the value.\n\n    Args:\n        filepath: The path to the file.\n        relative_dir: The directory to make the file relative to. Helpful when\n            adding files from a subdirectory.\n\n    Example:\n        ```python\n            my_obj.add_file(\"path/to/file.txt\")\n            print(my_obj.files)\n            # Output: {\"file.txt\": \"file data\"}\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    raw_bytes = filepath.read_bytes()\n    try:\n        data: str | bytes = raw_bytes.decode(\"utf-8\")  # str\n    except UnicodeDecodeError:\n        data = raw_bytes  # bytes\n\n    # Set filename relative to relative_dir\n    if relative_dir:\n        filename = str(filepath.relative_to(relative_dir))\n    else:\n        filename = filepath.name\n\n    self.files[filename] = data\n    # Add files to __pydantic_fields_set__ to ensure they are included in .save()\n    self.__pydantic_fields_set__.add(\"files\")\n</code></pre>"},{"location":"api/inputs/#qcio.ProgramArgs.add_files","title":"add_files","text":"<pre><code>add_files(\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Add all files in a directory to the object.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>StrOrPath</code> <p>The directory to add files from.</p> required <code>recursive</code> <code>bool</code> <p>Whether to recursively add files from subdirectories.</p> <code>False</code> <code>exclude</code> <code>list[str] | None</code> <p>A list of filenames to exclude from the directory.</p> <code>None</code> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def add_files(\n    self,\n    directory: StrOrPath,\n    recursive: bool = False,\n    exclude: list[str] | None = None,\n) -&gt; None:\n    \"\"\"Add all files in a directory to the object.\n\n    Args:\n        directory: The directory to add files from.\n        recursive: Whether to recursively add files from subdirectories.\n        exclude: A list of filenames to exclude from the directory.\n    \"\"\"\n    directory = Path(directory)\n    if exclude is None:\n        exclude = []\n    if recursive:\n        files = directory.rglob(\"*\")\n    else:\n        files = directory.glob(\"*\")\n    for filepath in files:\n        if filepath.is_file() and filepath.name not in exclude:\n            self.add_file(filepath, directory)\n</code></pre>"},{"location":"api/inputs/#qcio.ProgramArgs.save_files","title":"save_files","text":"<pre><code>save_files(directory: StrOrPath = Path('.')) -&gt; None\n</code></pre> <p>Write all files to the specified directory</p> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def save_files(self, directory: StrOrPath = Path(\".\")) -&gt; None:\n    \"\"\"Write all files to the specified directory\"\"\"\n    directory = Path(directory)\n    directory.mkdir(exist_ok=True)\n    for filename, data in self.files.items():\n        mode = \"w\" if isinstance(data, str) else \"wb\"\n        filepath = directory / filename\n        # In case filename is a relative path, create the parent directories\n        filepath.parent.mkdir(exist_ok=True, parents=True)\n        filepath.open(mode).write(data)\n</code></pre>"},{"location":"api/lengthunit/","title":"LengthUnit","text":""},{"location":"api/lengthunit/#qcio.LengthUnit","title":"qcio.LengthUnit","text":"<p>The unit of length.</p> <p>Attributes:</p> Name Type Description <code>BOHR</code> <code>str</code> <p>Bohr.</p> <code>ANGSTROM</code> <code>str</code> <p>Angstroms.</p>"},{"location":"api/model/","title":"Model","text":""},{"location":"api/model/#qcio.Model","title":"qcio.Model","text":"<p>The model for the quantum chemistry calculation.</p> <p>Attributes:</p> Name Type Description <code>method</code> <code>str</code> <p>The name of the method to be used in the calculation. Named according to the convention of the program being called. If an MM calculation then the name of the force field.</p> <code>basis</code> <code>str | None</code> <p>The name of the basis set to be used in the calculation. Named according to the convention of the program being called.</p>"},{"location":"api/overview/","title":"Overview","text":""},{"location":"api/overview/#qcio-operates-on-a-simple-mental-model","title":"\ud83e\udde0 <code>qcio</code> operates on a simple mental model","text":"<ul> <li><code>Structure</code> objects represent a collection of atoms, a molecule, or any super molecular structure in 3D cartesian space.</li> <li><code>Input</code> objects define the parameters for a calculation.</li> <li><code>Results</code> objects store computed values and output files (collectively called <code>Data</code>) from a calculation. <code>Results</code> also stores the exact input data (<code>.input_data</code>) used for a calculation, logs, relevant metadata, and <code>Provenance</code> information so you have full visibility into how every result was generated.</li> <li>Other objects, such as <code>Identifiers</code>, <code>Files</code>, <code>Provenance</code>, and <code>Model</code> support these core data structures by organizing relevant information in a user-friendly way.</li> <li>\ud83d\udcbe Saving your data to disk and re-opening it again later for analysis is as simple as calling <code>my_obj.save(/path/to/file.json)</code> or <code>MyModel.open(/path/to/file.json)</code>. These methods are not shown in the documentation for individual classes to avoid redundancy. Files can be saved as <code>.json</code>, <code>.yaml</code>, or <code>.toml</code>. <code>Structure</code> and <code>OptimizationResults</code> (which contains a list of <code>Structures</code>) may additionally be saved as <code>.xyz</code> files for compatibility with external program.</li> </ul>"},{"location":"api/provenance/","title":"Provenance","text":""},{"location":"api/provenance/#qcio.Provenance","title":"qcio.Provenance","text":"<p>Provenance information for a QC program.</p> <p>Attributes:</p> Name Type Description <code>program</code> <code>str</code> <p>The name of the program that created the output.</p> <code>version</code> <code>str</code> <p>The version of the program that created the output.</p> <code>scratch_dir</code> <code>Path | None</code> <p>The working directory used by the program.</p> <code>wall_time</code> <code>float | None</code> <p>The wall time used by the program.</p> <code>hostname</code> <code>str | None</code> <p>The hostname of the machine the program was run on.</p> <code>hostcpus</code> <code>int | None</code> <p>The number of logical CPUs on the host machine where the program ran.</p> <code>hostmem</code> <code>int | None</code> <p>The amount of memory on the host machine where the program ran in GiB.</p> <code>extras</code> <code>dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p>"},{"location":"api/qciobasemodel/","title":"QCIOBaseModel","text":""},{"location":"api/qciobasemodel/#qcio.models.base_models.QCIOBaseModel","title":"qcio.models.base_models.QCIOBaseModel","text":"<p>Base Model for all QCIO objects.</p> <p>Attributes:</p> Name Type Description <code>version</code> <p>The version of the schema.</p> <code>extras</code> <code>dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p>"},{"location":"api/qciobasemodel/#qcio.models.base_models.QCIOBaseModel.open","title":"open  <code>classmethod</code>","text":"<pre><code>open(filepath: Path | str) -&gt; Self\n</code></pre> <p>Instantiate an object from data saved to disk.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to the object on disk.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The instantiated object.</p> Example <pre><code>my_obj = MyModel.open(\"path/to/file.json\")\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>@classmethod\ndef open(cls, filepath: Path | str) -&gt; Self:\n    \"\"\"Instantiate an object from data saved to disk.\n\n    Args:\n        filepath: The path to the object on disk.\n\n    Returns:\n        The instantiated object.\n\n    Example:\n        ```python\n        my_obj = MyModel.open(\"path/to/file.json\")\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    data = filepath.read_text()\n\n    if filepath.suffix in [\".yaml\", \".yml\"]:\n        return cls.model_validate(yaml.safe_load(data))\n    elif filepath.suffix == \".toml\":\n        return cls.model_validate(toml.loads(data))\n\n    # Assume json for all other file extensions\n    return cls.model_validate_json(data)\n</code></pre>"},{"location":"api/qciobasemodel/#qcio.models.base_models.QCIOBaseModel.open_multi","title":"open_multi  <code>classmethod</code>","text":"<pre><code>open_multi(filepath: Path | str) -&gt; list[Self]\n</code></pre> <p>Instantiate a list of objects from data saved to disk.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to the object on disk. Must be a list of objects.</p> required <p>Returns:</p> Type Description <code>list[Self]</code> <p>A list of instantiated objects.</p> Example <pre><code>my_objs = MyModel().open_multi(\"path/to/file.json\")\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>@classmethod\ndef open_multi(cls, filepath: Path | str) -&gt; list[Self]:\n    \"\"\"Instantiate a list of objects from data saved to disk.\n\n    Args:\n        filepath: The path to the object on disk. Must be a list of objects.\n\n    Returns:\n        A list of instantiated objects.\n\n    Example:\n        ```python\n        my_objs = MyModel().open_multi(\"path/to/file.json\")\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    data = filepath.read_text()\n\n    if filepath.suffix in [\".yaml\", \".yml\"]:\n        return [cls.model_validate(d) for d in yaml.safe_load(data)]\n    elif filepath.suffix == \".toml\":\n        return [cls.model_validate(d) for d in toml.loads(data)]\n\n    # Assume json for all other file extensions\n    return [cls.model_validate(d) for d in json.loads(data)]\n</code></pre>"},{"location":"api/qciobasemodel/#qcio.models.base_models.QCIOBaseModel.save","title":"save","text":"<pre><code>save(\n    filepath: Path | str,\n    exclude_none: bool = True,\n    exclude_unset: bool = True,\n    indent: int = 4,\n    **kwargs,\n) -&gt; None\n</code></pre> <p>Save an object to disk as <code>json</code>, <code>yaml</code>, or <code>toml</code>. Objects such as <code>Structure</code> and <code>OptimizationResults</code> can additionally be saved as <code>xyz</code> files.</p> Note <p>By default the object will be saved as a <code>json</code> file. If the file extension is <code>.yaml</code> or <code>.yml</code>, the object will be saved as a <code>yaml</code> file. If the file extension is <code>.toml</code>, the object will be saved as a <code>toml</code> file. If the file extension is <code>.xyz</code>, the object will be saved as an <code>xyz</code> file (for objects that support this format such as a <code>Structure</code> or an <code>OptimizationResults</code> which contains <code>.trajectory: list[Structure]</code>).</p> <p>Additionally, padding will be added to the file by default to make it more human-readable. You can adjust the amount of padding added by changing the <code>indent</code> parameter. Pass <code>indent=None</code> to create a more compact file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to write the object to.</p> required <code>exclude_none</code> <code>bool</code> <p>If True, attributes with a value of None will not be written. Changing default behavior from pydantic.model_dump() to True.</p> <code>True</code> <code>exclude_unset</code> <code>bool</code> <p>If True, attributes that have not been set will not be written (i.e., values set to their default value).</p> <code>True</code> <code>indent</code> <code>int</code> <p>The number of spaces to use for indentation in the JSON file. 0 creates a more compact JSON file, 4 is more human-readable.</p> <code>4</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the serialization method.</p> <code>{}</code> Example <pre><code>my_obj.save(\"path/to/file.json\")\n</code></pre> <pre><code>my_obj.save(\"path/to/file.yaml\")\n</code></pre> <pre><code>my_obj.save(\"path/to/file.toml\")\n</code></pre> <pre><code>my_obj.save(\"path/to/file.xyz\")\n</code></pre> Source code in <code>src/qcio/models/base_models.py</code> <pre><code>def save(\n    self,\n    filepath: Path | str,\n    exclude_none: bool = True,\n    exclude_unset: bool = True,\n    indent: int = 4,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Save an object to disk as `json`, `yaml`, or `toml`. Objects such as `Structure`\n    and `OptimizationResults` can additionally be saved as `xyz` files.\n\n    Note:\n        By default the object will be saved as a `json` file. If the file extension\n        is `.yaml` or `.yml`, the object will be saved as a `yaml` file. If the file\n        extension is `.toml`, the object will be saved as a `toml` file. If the file\n        extension is `.xyz`, the object will be saved as an `xyz` file (for objects\n        that support this format such as a `Structure` or an `OptimizationResults`\n        which contains `.trajectory: list[Structure]`).\n\n        Additionally, padding will be added to the file by default to make it more\n        human-readable. You can adjust the amount of padding added by changing the\n        `indent` parameter. Pass `indent=None` to create a more compact file.\n\n    Args:\n        filepath: The path to write the object to.\n        exclude_none: If True, attributes with a value of None will not be written.\n            Changing default behavior from pydantic.model_dump() to True.\n        exclude_unset: If True, attributes that have not been set will not be\n            written (i.e., values set to their default value).\n        indent: The number of spaces to use for indentation in the JSON file. 0\n            creates a more compact JSON file, 4 is more human-readable.\n        **kwargs: Additional keyword arguments to pass to the serialization method.\n\n    Example:\n        ```python\n        my_obj.save(\"path/to/file.json\")\n        ```\n\n        ```python\n        my_obj.save(\"path/to/file.yaml\")\n        ```\n\n        ```python\n        my_obj.save(\"path/to/file.toml\")\n        ```\n\n        ```python\n        my_obj.save(\"path/to/file.xyz\")\n        ```\n    \"\"\"\n    filepath = Path(filepath)\n    filepath.parent.mkdir(exist_ok=True, parents=True)\n\n    if self.extras:\n        # Ensure pydantic knows the field has been set\n        self.__pydantic_fields_set__.add(\"extras\")\n\n    model_dict = self.model_dump(\n        mode=\"json\",\n        exclude_none=exclude_none,\n        exclude_unset=exclude_unset,\n        **kwargs,\n    )\n\n    if filepath.suffix in [\".yaml\", \".yml\"]:\n        data = yaml.dump(model_dict, indent=indent)\n\n    elif filepath.suffix == \".toml\":\n        data = toml.dumps(model_dict)\n\n    else:\n        # Write data to json regardless of file extension\n        data = json.dumps(model_dict, indent=indent)\n\n    filepath.write_text(data)\n</code></pre>"},{"location":"api/results/","title":"Results","text":"<p><code>Results</code> is the core object that captures all information from a QC calculation including all input data, the computed values and files (collectively called <code>Data</code>), and additional metadata such as <code>logs</code> and <code>Provenance</code> information. The <code>.data</code> attribute will correspond to the <code>CalcType</code> requested, e.g., a <code>SinglePointData</code>, <code>OptimizationsData</code>, etc.</p> <p>options: members: false</p>"},{"location":"api/results/#qcio.Results","title":"qcio.Results","text":"<p>The core results object from a quantum chemistry calculation.</p> <p>Attributes:</p> Name Type Description <code>input_data</code> <code>InputType</code> <p>The input data for the calculation. Any of <code>qcio.Inputs</code>.</p> <code>success</code> <code>Literal[True, False]</code> <p>Whether the calculation was successful.</p> <code>data</code> <code>DataType</code> <p>The data from the calculation. Contains parsed values and files. Any of <code>qcio.Data</code>.</p> <code>logs</code> <code>str | None</code> <p>The logs from the calculation.</p> <code>traceback</code> <code>str | None</code> <p>The traceback from the calculation, if it failed.</p> <code>provenance</code> <code>Provenance</code> <p>The provenance information for the calculation.</p> <code>extras</code> <code>Dict[str, Any]</code> <p>Additional information to bundle with the results. Use for schema development and scratch space.</p> <code>plogs</code> <code>str</code> <p><code>@property</code> Print the logs.</p> <code>ptraceback</code> <code>str</code> <p><code>@property</code> Print the traceback.</p>"},{"location":"api/results/#qcio.Results.files","title":"files  <code>property</code>","text":"<pre><code>files: dict[str, str | bytes]\n</code></pre> <p>Return the files attribute.</p>"},{"location":"api/results/#qcio.Results.plogs","title":"plogs  <code>property</code>","text":"<pre><code>plogs: None\n</code></pre> <p>Print the logs</p>"},{"location":"api/results/#qcio.Results.pstdout","title":"pstdout  <code>property</code>","text":"<pre><code>pstdout: None\n</code></pre> <p>Print the logs</p>"},{"location":"api/results/#qcio.Results.ptraceback","title":"ptraceback  <code>property</code>","text":"<pre><code>ptraceback: None\n</code></pre> <p>Print the traceback</p>"},{"location":"api/results/#qcio.Results.results","title":"results  <code>property</code>","text":"<pre><code>results: DataType\n</code></pre> <p>Return the data attribute.</p>"},{"location":"api/results/#qcio.Results.return_result","title":"return_result  <code>property</code>","text":"<pre><code>return_result: (\n    float | SerializableNDArray | Structure | None\n)\n</code></pre> <p>Return the primary result of the calculation.</p>"},{"location":"api/results/#qcio.Results.stdout","title":"stdout  <code>property</code>","text":"<pre><code>stdout: str | None\n</code></pre> <p>Backwards compatibility for .stdout attribute.</p>"},{"location":"api/results/#data","title":"Data","text":"<p>options: members: false</p> <p>options: members: - structures - final_structure - energies - final_energy - to_xyz - save</p>"},{"location":"api/results/#qcio.Data","title":"qcio.Data  <code>module-attribute</code>","text":"<pre><code>Data = Union[Files, StructuredData]\n</code></pre>"},{"location":"api/results/#qcio.SinglePointData","title":"qcio.SinglePointData","text":"<p>The computed data from a single point calculation.</p> <p>Attributes:</p> Name Type Description <code>energy</code> <code>float | None</code> <p>The electronic energy of the structure in <code>Hartrees</code>.</p> <code>gradient</code> <code>SerializableNDArray | None</code> <p>The gradient of the structure in <code>Hartrees/Bohr</code>.</p> <code>hessian</code> <code>SerializableNDArray | None</code> <p>The hessian of the structure in <code>Hartrees/Bohr^2</code>.</p> <code>nuclear_repulsion_energy</code> <code>float | None</code> <p>The nuclear repulsion energy of the structure in Hartrees.</p> <code>wavefunction</code> <code>Wavefunction | None</code> <p>Wavefunction data from the calculation.</p> <code>freqs_wavenumber</code> <code>list[float]</code> <p>The frequencies of the structure in wavenumbers.</p> <code>normal_modes_cartesian</code> <code>SerializableNDArray | None</code> <p>3D n_vibmodes x n_atoms x 3 array containing un-mass-weighted Cartesian displacements of each normal mode in Bohr.</p> <code>gibbs_free_energy</code> <code>float | None</code> <p>Gibbs free energy (i.e. thermochemical analysis) in Hartrees of a system where translation / rotation / vibration degrees of freedom are approximated using ideal gas / rigid rotor / harmonic oscillator respectively.</p> <code>scf_dipole_moment</code> <code>list[float] | None</code> <p>The x, y, z component of the dipole moment of the structure in units of e a0 (NOT Debye!).</p>"},{"location":"api/results/#qcio.SinglePointData.return_result","title":"return_result","text":"<pre><code>return_result(\n    calctype: CalcType,\n) -&gt; float | SerializableNDArray\n</code></pre> <p>Return the primary result of the calculation.</p> Source code in <code>src/qcio/models/results.py</code> <pre><code>def return_result(self, calctype: CalcType) -&gt; float | SerializableNDArray:\n    \"\"\"Return the primary result of the calculation.\"\"\"\n    return getattr(self, calctype.value)\n</code></pre>"},{"location":"api/results/#qcio.OptimizationData","title":"qcio.OptimizationData","text":"<p>Computed data for an optimization (may be for a minimum or transition state).</p> <p>Attributes:</p> Name Type Description <code>energies</code> <code>ndarray</code> <p>The energies for each step of the optimization.</p> <code>structures</code> <code>list[Structure]</code> <p>The Structure objects for each step of the optimization.</p> <code>final_structure</code> <code>Structure</code> <p>The final, optimized Structure.</p> <code>trajectory</code> <code>list[Results[ProgramInput, SinglePointData] | Results[ProgramInput, Files]]</code> <p>The Results objects for each step of the optimization.</p>"},{"location":"api/results/#qcio.OptimizationData.energies","title":"energies  <code>property</code>","text":"<pre><code>energies: ndarray\n</code></pre> <p>The energies for each step of the optimization.</p>"},{"location":"api/results/#qcio.OptimizationData.final_energy","title":"final_energy  <code>property</code>","text":"<pre><code>final_energy: float | None\n</code></pre> <p>The final energy in the optimization. Is <code>np.nan</code> if final calculation failed.</p>"},{"location":"api/results/#qcio.OptimizationData.final_structure","title":"final_structure  <code>property</code>","text":"<pre><code>final_structure: Structure\n</code></pre> <p>The final Structure in the optimization.</p>"},{"location":"api/results/#qcio.OptimizationData.structures","title":"structures  <code>property</code>","text":"<pre><code>structures: list[Structure]\n</code></pre> <p>The Structure objects for each step of the optimization.</p>"},{"location":"api/results/#qcio.OptimizationData.return_result","title":"return_result","text":"<pre><code>return_result(calctype: CalcType) -&gt; Structure | None\n</code></pre> <p>Return the primary result of the calculation.</p> Source code in <code>src/qcio/models/results.py</code> <pre><code>def return_result(self, calctype: CalcType) -&gt; Structure | None:\n    \"\"\"Return the primary result of the calculation.\"\"\"\n    return self.final_structure\n</code></pre>"},{"location":"api/results/#qcio.OptimizationData.save","title":"save","text":"<pre><code>save(\n    filepath: Path | str,\n    exclude_none: bool = True,\n    exclude_unset: bool = True,\n    indent: int = 4,\n    **kwargs: dict[str, Any],\n) -&gt; None\n</code></pre> <p>Save an OptimizationOutput to a file.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>Path | str</code> <p>The path to save the molecule to.</p> required <code>exclude_none</code> <code>bool</code> <p>If True, attributes with a value of None will not be written to the file.</p> <code>True</code> <code>exclude_unset</code> <code>bool</code> <p>If True, attributes that have not been set will not be written to the file.</p> <code>True</code> <code>**kwargs</code> <code>dict[str, Any]</code> <p>Additional keyword arguments to pass to the json serializer.</p> <code>{}</code> Note <p>If the filepath has a <code>.xyz</code> extension, the trajectory will be saved to a multi-structure <code>xyz</code> file.</p> Source code in <code>src/qcio/models/results.py</code> <pre><code>def save(\n    self,\n    filepath: Path | str,\n    exclude_none: bool = True,\n    exclude_unset: bool = True,\n    indent: int = 4,\n    **kwargs: dict[str, Any],\n) -&gt; None:\n    \"\"\"Save an OptimizationOutput to a file.\n\n    Args:\n        filepath: The path to save the molecule to.\n        exclude_none: If True, attributes with a value of None will not be written\n            to the file.\n        exclude_unset: If True, attributes that have not been set will not be\n            written to the file.\n        **kwargs: Additional keyword arguments to pass to the json serializer.\n\n    Note:\n        If the filepath has a `.xyz` extension, the trajectory will be saved to a\n        multi-structure `xyz` file.\n    \"\"\"\n    filepath = Path(filepath)\n    if filepath.suffix == \".xyz\":\n        filepath.write_text(self.to_xyz())\n        return\n    super().save(filepath, exclude_none, exclude_unset, indent, **kwargs)\n</code></pre>"},{"location":"api/results/#qcio.OptimizationData.to_xyz","title":"to_xyz","text":"<pre><code>to_xyz() -&gt; str\n</code></pre> <p>Return the trajectory as an <code>xyz</code> string.</p> Source code in <code>src/qcio/models/results.py</code> <pre><code>def to_xyz(self) -&gt; str:\n    \"\"\"Return the trajectory as an `xyz` string.\"\"\"\n    return to_multi_xyz(\n        prog_output.input_data.structure for prog_output in self.trajectory\n    )\n</code></pre>"},{"location":"api/results/#qcio.ConformerSearchData","title":"qcio.ConformerSearchData","text":"<p>Data from a conformer search calculation.</p> <p>Conformers and rotamers are sorted by energy.</p> <p>Attributes:</p> Name Type Description <code>conformers</code> <code>list[Structure]</code> <p>The conformers found in the search.</p> <code>conformer_energies</code> <code>SerializableNDArray</code> <p>The energies for each conformer.</p> <code>rotamers</code> <code>list[Structure]</code> <p>The rotamers found in the search.</p> <code>rotamer_energies</code> <code>SerializableNDArray</code> <p>The energies for each rotamer.</p>"},{"location":"api/results/#qcio.ConformerSearchData.conformer_energies_relative","title":"conformer_energies_relative  <code>property</code>","text":"<pre><code>conformer_energies_relative: ndarray\n</code></pre> <p>The relative energies for each conformer in the search.</p>"},{"location":"api/results/#qcio.ConformerSearchData.rotamer_energies_relative","title":"rotamer_energies_relative  <code>property</code>","text":"<pre><code>rotamer_energies_relative: ndarray\n</code></pre> <p>The relative energies for each rotamer in the search.</p>"},{"location":"api/results/#qcio.ConformerSearchData.conformers_filtered","title":"conformers_filtered","text":"<pre><code>conformers_filtered(\n    threshold: float = 1.0, **rmsd_kwargs\n) -&gt; tuple[list[Structure], SerializableNDArray]\n</code></pre> <p>Moved since qcio 0.15.0</p> <p>This convenience method has moved to [<code>qcinf.filter_conformers</code>][] and this stub will be removed from qcio in a future release.</p> <pre><code>from qcinf import filter_conformers\n\nfiltered_csr = filter_conformers(\n    conformers=csr\n    threshold=1.0,          # Bohr\n    backend=\"qcinf\",      # or \"rdkit\",\n    **rmsd_kwargs,\n)\n</code></pre> Source code in <code>src/qcio/models/results.py</code> <pre><code>def conformers_filtered(\n    self,\n    threshold: float = 1.0,\n    **rmsd_kwargs,\n) -&gt; tuple[list[Structure], SerializableNDArray]:\n    \"\"\"\n    !!! warning \"Moved since *qcio* 0.15.0\"\n        This convenience method has moved to\n        [`qcinf.filter_conformers`][qcinf.filter_conformers]\n        and this stub will be **removed** from *qcio* in a future release.\n\n        ```python\n        from qcinf import filter_conformers\n\n        filtered_csr = filter_conformers(\n            conformers=csr\n            threshold=1.0,          # Bohr\n            backend=\"qcinf\",      # or \"rdkit\",\n            **rmsd_kwargs,\n        )\n        ```\n    \"\"\"\n\n    warnings.warn(\n        \"`ConformerSearchResults.conformers_filtered()` is deprecated. \"\n        \"Install *qcinf* and use `qcinf.filter_conformers` instead.\",\n        DeprecationWarning,\n        stacklevel=2,\n    )\n    raise NotImplementedError(\n        \"Method removed.  Replace with:\\n\\n\"\n        \"    from qcinf import filter_conformers\\n\\n\"\n        \"    filtered_csr = filter_conformers(\\n\"\n        \"        prog_output.results,\\n\"\n        \"        threshold=1.0,\\n\"\n        \"        backend='qcinf',\\n\"\n        \"        **rmsd_kwargs\\n\"\n        \"    )\"\n    )\n</code></pre>"},{"location":"api/results/#qcio.Wavefunction","title":"qcio.Wavefunction","text":"<p>The wavefunction for a single point calculation.</p> <p>Attributes:</p> Name Type Description <code>scf_eigenvalues_a</code> <code>SerializableNDArray | None</code> <p>The SCF alpha-spin orbital eigenvalues.</p> <code>scf_eigenvalues_b</code> <code>SerializableNDArray | None</code> <p>The SCF beta-spin orbital eigenvalues.</p> <code>scf_occupations_a</code> <code>SerializableNDArray | None</code> <p>The SCF alpha-spin orbital occupations.</p> <code>scf_occupations_b</code> <code>SerializableNDArray | None</code> <p>The SCF beta-spin orbital occupations.</p>"},{"location":"api/structure/","title":"Structure &amp; Identifiers","text":"<p>A <code>Structure</code> is the core <code>qcio</code> object for representing a molecule or molecular super structure in 3D space. <code>Structure</code> objects can be created directly from <code>symbol</code> and <code>geometry</code> information (geometry must be in <code>Bohr</code>), from SMILES strings, from <code>xyz</code> files, or opened from <code>Structure</code> objects previously saved to disk.</p>"},{"location":"api/structure/#qcio.Structure","title":"qcio.Structure","text":"<pre><code>Structure(**data: Any)\n</code></pre> <p>A Structure object with atoms and their corresponding cartesian coordinates,     charge, multiplicity, and identifiers such as name, smiles, etc.</p> <p>Attributes:</p> Name Type Description <code>symbols</code> <code>list[str]</code> <p>The atomic symbols of the structure.</p> <code>geometry</code> <code>SerializableNDArray</code> <p>The geometry of the structure in Cartesian coordinates. Units are Bohr (AU).</p> <code>identifiers</code> <code>Identifiers</code> <p>Identifiers for the structure such as name, smiles, etc.</p> <code>charge</code> <code>int</code> <p>The molecular charge.</p> <code>multiplicity</code> <code>int</code> <p>The molecular multiplicity.</p> <code>connectivity</code> <code>list[tuple[int, int, float]]</code> <p>Explicit description of the bonds between atoms. Each tuple contains the indices of the atoms in the bond and the order of the bond. E.g., <code>[(0, 1, 1.0), (1, 2, 2.0)]</code> indicates a single bond between atoms 0 and 1 and a double bond between atoms 1 and 2.</p> <code>extras</code> <code>Dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p> <code>ids</code> <code>Identifiers</code> <p><code>@property</code> Shortcut to access identifiers.</p> <code>geometry_angstrom</code> <code>ndarray</code> <p><code>@property</code> The geometry of the structure in Angstrom.</p> <code>atomic_numbers</code> <code>list[int]</code> <p><code>@property</code> The atomic numbers of the atoms in the structure.</p> <code>formula</code> <code>str</code> <p><code>@property</code> The molecular formula of the structure using the Hill System.</p> Example <pre><code>from qcio import Structure\n\nstructure = Structure(\n    symbols=[\"H\", \"O\", \"H\"],\n    geometry=[[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 2.0]],\n    charge=0,  # optional; defaults to 0\n    multiplicity=1,  # optional; defaults to 1\n    identifiers={\"smiles\": \"O\"},  # optional\n)\n</code></pre> Source code in <code>src/qcio/models/structure.py</code> <pre><code>def __init__(self, **data: Any):\n    \"\"\"Create a new Structure object.\n\n    Example:\n        ```python\n        from qcio import Structure\n\n        structure = Structure(\n            symbols=[\"H\", \"O\", \"H\"],\n            geometry=[[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 2.0]],\n            charge=0,  # optional; defaults to 0\n            multiplicity=1,  # optional; defaults to 1\n            identifiers={\"smiles\": \"O\"},  # optional\n        )\n\n        ```\n    \"\"\"\n    # Backwards compatibility for 'ids' attribute.\n    if identifiers := data.pop(\"ids\", None):\n        warnings.warn(\n            \"Passing 'ids' is deprecated and will be removed in a future \"\n            \"release. Please use 'identifiers' instead. Once instantiated, \"\n            \"you can use structure.ids to access the identifiers as a shortcut.\",\n            category=FutureWarning,\n            stacklevel=2,\n        )\n        data[\"identifiers\"] = identifiers\n    super().__init__(**data)\n</code></pre>"},{"location":"api/structure/#qcio.Structure.from_xyz","title":"from_xyz  <code>classmethod</code>","text":"<pre><code>from_xyz(\n    xyz_str: str,\n    *,\n    charge: int | None = None,\n    multiplicity: int | None = None,\n) -&gt; Self\n</code></pre> <p>Create a Structure from an XYZ file or string.</p> <p>Parameters:</p> Name Type Description Default <code>xyz_str</code> <code>str</code> <p>The XYZ string.</p> required <code>charge</code> <code>int | None</code> <p>The molecular charge of the structure. If not provided, will read from the XYZ string if set or default to 0.</p> <code>None</code> <code>multiplicity</code> <code>int | None</code> <p>The molecular multiplicity of the structure. If not provided, will read from the XYZ string if set or default to 1.</p> <code>None</code> Note <p>Will read qcio data such as <code>charge</code> and <code>multiplicity</code> from the comments line with a <code>qcio_key=value</code> format (if it is present). Also will read in qcio__identifiers_* keys and additional non-qcio comments.</p> Example <pre><code>struct = Structure.from_xyz(xyz_str)\n</code></pre> Source code in <code>src/qcio/models/structure.py</code> <pre><code>@classmethod\ndef from_xyz(\n    cls,\n    xyz_str: str,\n    *,\n    charge: int | None = None,\n    multiplicity: int | None = None,\n) -&gt; Self:\n    \"\"\"Create a Structure from an XYZ file or string.\n\n    Args:\n        xyz_str: The XYZ string.\n        charge: The molecular charge of the structure. If not provided, will read\n            from the XYZ string if set or default to 0.\n        multiplicity: The molecular multiplicity of the structure. If not provided,\n            will read from the XYZ string if set or default to 1.\n\n    Note:\n        Will read qcio data such as `charge` and `multiplicity` from the comments\n        line with a `qcio_key=value` format (if it is present). Also will read in\n        qcio__identifiers_* keys and additional non-qcio comments.\n\n    Example:\n        ```python\n        struct = Structure.from_xyz(xyz_str)\n        ```\n    \"\"\"\n\n    lines = xyz_str.split(\"\\n\")\n\n    num_atoms = int(lines[0])\n\n    # Collect comments\n    structure_kwargs: dict[str, Any] = {}\n    identifier_kwargs: dict[str, Any] = {}\n    other_comments: list[str] = []\n\n    for item in lines[1].strip().split():\n        if item.startswith(\"qcio__identifiers_\"):\n            key = item.split(\"=\")[0].replace(\"qcio__identifiers_\", \"\")\n            value = item.split(\"=\")[1]\n            identifier_kwargs[key] = value\n        elif item.startswith(\"qcio_\"):\n            key = item.split(\"=\")[0].replace(\"qcio_\", \"\")\n            value = item.split(\"=\")[1]\n            structure_kwargs[key] = value\n        else:\n            other_comments.append(item)\n\n    if charge is not None and \"charge\" in structure_kwargs:\n        raise ValueError(\"Charge cannot be set in the file and as an argument.\")\n    if multiplicity is not None and \"multiplicity\" in structure_kwargs:\n        raise ValueError(\n            \"Multiplicity cannot be set in the file and as an argument.\"\n        )\n\n    # Set charge and multiplicity if provided\n    if charge is not None:\n        structure_kwargs[\"charge\"] = charge\n    if multiplicity is not None:\n        structure_kwargs[\"multiplicity\"] = multiplicity\n\n    symbols = []\n    geometry = []\n    for line in lines[2 : 2 + num_atoms]:\n        split_line = line.split()\n        symbols.append(split_line[0])\n        geometry.append([float(val) / BOHR_TO_ANGSTROM for val in split_line[1:]])\n\n    return cls(\n        symbols=symbols,\n        geometry=geometry,\n        **structure_kwargs,\n        identifiers=Identifiers(**identifier_kwargs),\n        extras={cls._xyz_comment_key: other_comments},\n    )\n</code></pre>"},{"location":"api/structure/#qcio.Structure.to_xyz","title":"to_xyz","text":"<pre><code>to_xyz(precision: int = 17) -&gt; str\n</code></pre> <p>Return an xyz string representation of the structure.</p> <p>Parameters:</p> Name Type Description Default <code>precision</code> <code>int</code> <p>The number of decimal places to include in the xyz file. Default 17 which captures all precision of float64.</p> <code>17</code> <p>Notes:     Will add qcio data such as charge and multiplicity to the comments line with     a <code>qcio_key=value</code> format.</p> Source code in <code>src/qcio/models/structure.py</code> <pre><code>def to_xyz(self, precision: int = 17) -&gt; str:\n    \"\"\"Return an xyz string representation of the structure.\n\n    Args:\n        precision: The number of decimal places to include in the xyz file. Default\n            17 which captures all precision of float64.\n    Notes:\n        Will add qcio data such as charge and multiplicity to the comments line with\n        a `qcio_key=value` format.\n    \"\"\"\n\n    qcio_data = {  # These get added to comments line (line 2) in xyz file\n        \"qcio_charge\": self.charge,\n        \"qcio_multiplicity\": self.multiplicity,\n    }\n\n    # Add identifiers to qcio_data\n    for key, value in self.identifiers.__dict__.items():\n        if key != \"extras\" and value:\n            qcio_data[f\"qcio__identifiers_{key}\"] = value\n\n    assert isinstance(self.geometry, np.ndarray)  # For mypy\n    geometry_angstrom = self.geometry * BOHR_TO_ANGSTROM\n\n    xyz_lines = []\n    xyz_lines.append(f\"{len(self.symbols)}\")\n    # Add qcio data to comments line\n    comments = f\"{' '.join([f'{k}={v}' for k, v in qcio_data.items()])}\"\n    # Add any other comments\n    if xyz_comments := self.extras.get(self._xyz_comment_key, []):\n        comments += \" \" + \" \".join(xyz_comments)\n    xyz_lines.append(comments)\n\n    # Create a format string using the precision parameter\n    format_str = f\"{{:2s}} {{: &gt;18.{precision}f}} {{: &gt;18.{precision}f}} {{: &gt;18.{precision}f}}\"  # noqa: E501\n\n    for symbol, (x, y, z) in zip(self.symbols, geometry_angstrom):\n        xyz_lines.append(format_str.format(symbol, x, y, z))\n    xyz_lines.append(\"\")  # Append newline to end of file\n    return \"\\n\".join(xyz_lines)\n</code></pre>"},{"location":"api/structure/#qcio.Structure.distance","title":"distance","text":"<pre><code>distance(i: int, j: int, units: LengthUnit = BOHR) -&gt; float\n</code></pre> <p>Calculate the distance between two atoms.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>The index of the first atom.</p> required <code>j</code> <code>int</code> <p>The index of the second atom.</p> required <code>units</code> <code>LengthUnit</code> <p>The units to return the distance in. Defaults to \"bohr\". May be \"bohr\" or \"angstrom\".</p> <code>BOHR</code> <p>Returns:</p> Type Description <code>float</code> <p>The distance between the atoms in units (Bohr or Angstrom).</p> Example <pre><code>struct.distance(0, 1)\n1.34\n</code></pre> Source code in <code>src/qcio/models/structure.py</code> <pre><code>def distance(self, i: int, j: int, units: LengthUnit = LengthUnit.BOHR) -&gt; float:\n    \"\"\"Calculate the distance between two atoms.\n\n    Args:\n        i: The index of the first atom.\n        j: The index of the second atom.\n        units: The units to return the distance in. Defaults to \"bohr\".\n            May be \"bohr\" or \"angstrom\".\n\n    Returns:\n        The distance between the atoms in units (Bohr or Angstrom).\n\n    Example:\n        ```python\n        struct.distance(0, 1)\n        1.34\n        ```\n    \"\"\"\n    distance = np.linalg.norm(self.geometry[i] - self.geometry[j])\n    if units == LengthUnit.ANGSTROM:\n        return float(distance * BOHR_TO_ANGSTROM)\n    return float(distance)\n</code></pre>"},{"location":"api/structure/#qcio.Structure.add_smiles","title":"add_smiles","text":"<pre><code>add_smiles(\n    *, program: str = \"rdkit\", hydrogens: bool = False\n) -&gt; None\n</code></pre> <p>!! DEPRECATED !!</p> <p>This helper has been removed to qcinf (see <code>qcinf.structure_to_smiles</code>). It will be removed from qcio in a future release.</p> Source code in <code>src/qcio/models/structure.py</code> <pre><code>def add_smiles(\n    self: \"Structure\",\n    *,\n    program: str = \"rdkit\",\n    hydrogens: bool = False,\n) -&gt; None:\n    \"\"\"\n    !! DEPRECATED !!\n\n    This helper has been removed to **qcinf** (see `qcinf.structure_to_smiles`).\n    It will be removed from qcio in a future release.\n    \"\"\"\n    warnings.warn(\n        \"`Structure.add_smiles()` has moved to `qcinf` and is no longer \"\n        \"implemented here.\\n\\n\"\n        \"Install qcinf and replace your call with:\\n\\n\"\n        \"    from qcinf import structure_to_smiles\\n\"\n        \"    smiles = structure_to_smiles(struct, backend='rdkit|openbabel')\\n\"\n        \"    struct.add_identifiers(smiles=smiles)\\n\\n\",\n        DeprecationWarning,  # use FutureWarning if you want it visible by default\n        stacklevel=2,\n    )\n    raise NotImplementedError(\n        \"Structure.add_smiles() is removed. \"\n        \"Use qcinf.structure_to_smiles and struct.add_identifiers instead.\"\n    )\n</code></pre>"},{"location":"api/structure/#qcio.Identifiers","title":"qcio.Identifiers","text":"<p>Structure identifiers.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str | None</code> <p>A human-readable, common name for the structure.</p> <code>name_IUPAC</code> <code>str | None</code> <p>The IUPAC name of the structure.</p> <code>smiles</code> <code>str | None</code> <p>The SMILES representation of the structure.</p> <code>canonical_smiles</code> <code>str | None</code> <p>The canonical SMILES representation of the structure.</p> <code>canonical_smiles_program</code> <code>str | None</code> <p>The program used to generate the canonical SMILES.</p> <code>canonical_explicit_hydrogen_smiles</code> <code>str | None</code> <p>The canonical explicit hydrogen SMILES representation of the structure.</p> <code>canonical_isomeric_smiles</code> <code>str | None</code> <p>The canonical isomeric SMILES representation of the structure.</p> <code>canonical_isomeric_explicit_hydrogen_smiles</code> <code>str | None</code> <p>The canonical isomeric explicit hydrogen SMILES representation of the structure.</p> <code>canonical_isomeric_explicit_hydrogen_mapped_smiles</code> <code>str | None</code> <p>The canonical isomeric explicit hydrogen mapped SMILES representation of the structure.</p> <code>inchi</code> <code>str | None</code> <p>The InChI representation of the structure.</p> <code>inchikey</code> <code>str | None</code> <p>The InChIKey representation of the structure.</p> <code>pubchem_cid</code> <code>str | None</code> <p>The PubChem Compound ID of the structure.</p> <code>pubchem_sid</code> <code>str | None</code> <p>The PubChem Substance ID of the structure.</p> <code>pubchem_conformerid</code> <code>str | None</code> <p>The PubChem Conformer ID of the structure.</p> <code>extras</code> <code>Dict[str, Any]</code> <p>Additional information to bundle with the object. Use for schema development and scratch space.</p>"},{"location":"api/utils/","title":"Utilities","text":""},{"location":"api/utils/#qcio.json_dumps","title":"qcio.json_dumps","text":"<pre><code>json_dumps(\n    obj: BaseModel | list[BaseModel],\n    exclude_unset: bool = True,\n    **model_dump_kwargs,\n) -&gt; str\n</code></pre> <p>Serialization helper for lists of pydantic objects.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>BaseModel | list[BaseModel]</code> <p>The object to serialize. Either a single pydantic object or a list of pydantic objects.</p> required <code>exclude_unset</code> <code>bool</code> <p>Whether to exclude unset fields from the serialized output.</p> <code>True</code> <code>**model_dump_kwargs</code> <p>Additional keyword arguments to pass to model_dump.</p> <code>{}</code> Source code in <code>src/qcio/utils.py</code> <pre><code>def json_dumps(\n    obj: BaseModel | list[BaseModel],\n    exclude_unset: bool = True,\n    **model_dump_kwargs,\n) -&gt; str:\n    \"\"\"Serialization helper for lists of pydantic objects.\n\n    Args:\n        obj: The object to serialize. Either a single pydantic object or a list of pydantic\n            objects.\n        exclude_unset: Whether to exclude unset fields from the serialized output.\n        **model_dump_kwargs: Additional keyword arguments to pass to model_dump.\n    \"\"\"\n    if isinstance(obj, list):\n        return json.dumps(\n            [\n                o.model_dump(exclude_unset=exclude_unset, **model_dump_kwargs)\n                for o in obj\n            ]\n        )\n    return obj.model_dump_json(exclude_unset=exclude_unset, **model_dump_kwargs)\n</code></pre>"},{"location":"api/utils/#qcio.to_multi_xyz","title":"qcio.to_multi_xyz","text":"<pre><code>to_multi_xyz(structures: Iterable[Structure]) -&gt; str\n</code></pre> <p>Create a multi-structure XYZ string from a list of structures.</p> <p>Parameters:</p> Name Type Description Default <code>structures</code> <code>Iterable[Structure]</code> <p>An Iterable of Structure objects.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The multi-structure XYZ string.</p> Source code in <code>src/qcio/models/utils.py</code> <pre><code>def to_multi_xyz(structures: Iterable[\"Structure\"]) -&gt; str:\n    \"\"\"Create a multi-structure XYZ string from a list of structures.\n\n    Args:\n        structures: An Iterable of Structure objects.\n\n    Returns:\n        The multi-structure XYZ string.\n    \"\"\"\n    return \"\".join(struct.to_xyz() for struct in structures)\n</code></pre>"},{"location":"api/view/","title":"View","text":""},{"location":"api/view/#qcio.view","title":"qcio.view","text":"<p>Tools for visualizing qcio objects in Jupyter Notebooks.</p> Design Decisions <ul> <li>The view function is the top-level method for viewing all qcio objects. It can     accept one or many objects and will determine the appropriate viewer to use.</li> <li>All functions that begin with \"generate\" will return a string of HTML. If users     want to use this HTML to create a custom view, they can do so. If they want to     display the HTML in a Jupyter Notebook, they can call display(HTML(html_string))     after importing <code>from IPython.display import HTML, display</code>.</li> <li>The basic layout for viewing results (all Results objects) is a table of     basic parameters followed by a structure viewer and results table or plot.     DualProgramInputs add details for the subprogram.     ----------------------------------------------------------------------------     | Structure      | Success | Calculation Type | Program | Model | Keywords |     ----------------------------------------------------------------------------     |                                    |                                     |     |      Structure Viewer (Optional)   |        Data Table or Plot        |     |                                    |                                     |     ----------------------------------------------------------------------------</li> </ul>"},{"location":"api/view/#qcio.view.DEFAULT_WIDTH","title":"DEFAULT_WIDTH  <code>module-attribute</code>","text":"<pre><code>DEFAULT_WIDTH: int = 600\n</code></pre> <p>The default width of the viewer in pixels.</p>"},{"location":"api/view/#qcio.view.DEFAULT_HEIGHT","title":"DEFAULT_HEIGHT  <code>module-attribute</code>","text":"<pre><code>DEFAULT_HEIGHT: int = 450\n</code></pre> <p>The default height of the viewer in pixels.</p>"},{"location":"api/view/#qcio.view.view","title":"view","text":"<pre><code>view(\n    *objs: Results | Structure | list[Structure], **kwargs\n) -&gt; None\n</code></pre> <p>Top level method for viewing all qcio objects. This should be the only method you need to use to view any qcio object.</p> <p>Parameters:</p> Name Type Description Default <code>*objs</code> <code>Results | Structure | list[Structure]</code> <p>The Results or Structure objects to view. May pass one or more objects or one or more lists of Structure objects.</p> <code>()</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the viewer functions.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None. Displays the qcio objects in the Jupyter Notebook.</p> Source code in <code>src/qcio/view.py</code> <pre><code>def view(\n    *objs: Results | Structure | list[Structure],\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Top level method for viewing all qcio objects. This should be the only method you\n    need to use to view any qcio object.\n\n    Args:\n        *objs: The Results or Structure objects to view. May pass one or more\n            objects or one or more lists of Structure objects.\n        **kwargs: Additional keyword arguments to pass to the viewer functions.\n\n    Returns:\n        None. Displays the qcio objects in the Jupyter Notebook.\n    \"\"\"\n    if all([isinstance(o, Structure) for o in objs]) or all(\n        isinstance(o, Structure) for lst in objs for o in lst\n    ):\n        structures(*objs, **kwargs)  # type: ignore\n        # Handle all structures in a single viewer\n        return\n\n    for obj in objs:\n        if isinstance(obj, Structure) or isinstance(obj, list):\n            structures(*objs, **kwargs)  # type: ignore\n\n        elif isinstance(obj, Results):\n            program_outputs(obj, **kwargs)\n\n        else:\n            raise NotImplementedError(f\"Viewing of {type(obj)} is not implemented.\")\n</code></pre>"},{"location":"api/view/#qcio.view.program_outputs","title":"program_outputs","text":"<pre><code>program_outputs(\n    *results: Results[\n        ProgramInput | DualProgramInput, Data\n    ],\n    animate: bool = True,\n    struct_viewer: bool = True,\n    conformer_rmsd_threshold: float | None = None,\n    conformer_rmsd_backend: str = \"qcinf\",\n    conformer_rmsd_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; None\n</code></pre> <p>Display one or many Results objects.</p> <p>Parameters:</p> Name Type Description Default <code>*results</code> <code>Results[ProgramInput | DualProgramInput, Data]</code> <p>The Results objects to display.</p> <code>()</code> <code>animate</code> <code>bool</code> <p>Whether to animate the structure if it is an optimization.</p> <code>True</code> <code>struct_viewer</code> <code>bool</code> <p>Whether to display the structure viewer.</p> <code>True</code> <code>conformer_rmsd_threshold</code> <code>float | None</code> <p>The threshold for RMSD to determine if conformers are unique. Defaults to 1.0 Bohr (0.53 \u00c5).</p> <code>None</code> <code>conformer_rmsd_kwargs</code> <code>dict | None</code> <p>Additional keyword arguments to pass to the conformer RMSD filtering function.</p> <code>None</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the viewer functions.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None. Displays the Results objects in the Jupyter Notebook.</p> Source code in <code>src/qcio/view.py</code> <pre><code>def program_outputs(\n    *results: Results[ProgramInput | DualProgramInput, Data],\n    animate: bool = True,\n    struct_viewer: bool = True,\n    conformer_rmsd_threshold: float | None = None,\n    conformer_rmsd_backend: str = \"qcinf\",\n    conformer_rmsd_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Display one or many Results objects.\n\n    Args:\n        *results: The Results objects to display.\n        animate: Whether to animate the structure if it is an optimization.\n        struct_viewer: Whether to display the structure viewer.\n        conformer_rmsd_threshold: The threshold for RMSD to determine if conformers are\n            unique. Defaults to 1.0 Bohr (0.53 \u00c5).\n        conformer_rmsd_kwargs: Additional keyword arguments to pass to the conformer\n            RMSD filtering function.\n        **kwargs: Additional keyword arguments to pass to the viewer functions.\n\n    Returns:\n        None. Displays the Results objects in the Jupyter Notebook.\n    \"\"\"\n\n    width = kwargs.get(\"width\", DEFAULT_WIDTH)\n    height = kwargs.get(\"height\", DEFAULT_HEIGHT)\n\n    for i, result in enumerate(results):\n        final_html = []\n        final_html.append(generate_output_table(result))\n\n        if isinstance(result.data, ConformerSearchData):\n            structures = [result.input_data.structure]\n\n            if conformer_rmsd_threshold is not None:\n                keep_indices = filter_conformers_indices(\n                    result.data.conformers,\n                    backend=conformer_rmsd_backend,\n                    threshold=conformer_rmsd_threshold,\n                    **(conformer_rmsd_kwargs or {}),\n                )\n                conformers = [result.data.conformers[i] for i in keep_indices]\n                energies_rel = result.data.conformer_energies_relative[keep_indices]\n            else:\n                conformers = result.data.conformers\n                energies_rel = result.data.conformer_energies_relative\n\n            structures += conformers\n            titles_extra = [\"Initial Structure\"] + [\n                f\"Conformer {i}\" for i in range(len(conformers))\n            ]\n            subtitles = [\"Rel Energy: Unknown\"] + [\n                f\"Rel Energy: +{re * constants.HARTREE_TO_KCAL_PER_MOL:.3f} kcal/mol\"\n                for re in energies_rel\n            ]\n            conf_viewer = generate_structure_viewer_html(\n                *structures, titles_extra=titles_extra, subtitles=subtitles, **kwargs\n            )\n            final_html.append(conf_viewer)\n            display(HTML(\"\".join(final_html)))\n\n        else:\n            # Create structure viewer\n            if not struct_viewer:\n                structure_html = \"struct_viewer = False\"\n\n            else:\n                titles_extra = kwargs.pop(\"titles_extra\", [])\n                try:\n                    title_extra = titles_extra[i]\n                except IndexError:\n                    title_extra = \"\"\n\n                # Determine the Structure to use\n                if isinstance(result.data, OptimizationData):\n                    for_viewer: Structure | list[Structure]\n                    if animate:\n                        for_viewer = result.data.structures\n                    else:\n                        for_viewer = result.data.final_structure\n                        title_extra += \" (Final Structure)\"\n\n                elif isinstance(result.data, SinglePointData):\n                    for_viewer = result.input_data.structure\n\n                elif isinstance(result.data, Files):\n                    for_viewer = result.input_data.structure\n                else:\n                    raise NotImplementedError(\n                        f\"Viewing of {type(result.data)} is not yet implemented.\"\n                    )\n\n                structure_html = generate_structure_viewer_html(\n                    for_viewer,\n                    titles_extra=[title_extra],\n                    **kwargs,\n                )\n\n            # Create data table or plot\n            if isinstance(result.data, OptimizationData):\n                data_html = generate_optimization_plot(\n                    result, figsize=(width / 100, height / 100)\n                )\n            else:\n                data_html = generate_data_table(result.data)\n\n            final_html.append(\n                f\"\"\"\n        &lt;div style=\"text-align: center;\"&gt;\n            &lt;div style=\"display: flex; align-items: center; justify-content: \n                space-around;\"&gt;\n                &lt;div style=\"text-align: center; margin-right: 20px; flex: 1;\"&gt;\n                    &lt;div style=\"display: inline-block; text-align: center;\"&gt;\n                        {structure_html}\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                &lt;div style=\"width: {width}px; height: {height}px; text-align: center; \n                    margin-left: 20px; flex: 1; overflow: auto;\"&gt;\n                    {data_html}\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n                \"\"\"\n            )\n\n            display(HTML(\"\".join(final_html)))\n</code></pre>"},{"location":"api/view/#qcio.view.structures","title":"structures","text":"<pre><code>structures(\n    *structs: Structure | list[Structure], **kwargs\n) -&gt; None\n</code></pre> <p>Display one or many Structure objects.</p> <p>Parameters:</p> Name Type Description Default <code>*structs</code> <code>Structure | list[Structure]</code> <p>The Structure objects or list of objects to display. If a list is passed the structures will be animated.</p> <code>()</code> <code>**kwargs</code> <p>Additional keyword arguments to pass to the viewer functions.</p> <code>{}</code> <p>Returns:</p> Type Description <code>None</code> <p>None. Displays the structures in the Jupyter Notebook.</p> Source code in <code>src/qcio/view.py</code> <pre><code>def structures(\n    *structs: Structure | list[Structure],\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Display one or many Structure objects.\n\n    Args:\n        *structs: The Structure objects or list of objects to display. If a list is\n            passed the structures will be animated.\n        **kwargs: Additional keyword arguments to pass to the viewer functions.\n\n    Returns:\n        None. Displays the structures in the Jupyter Notebook.\n    \"\"\"\n    display(HTML(generate_structure_viewer_html(*structs, **kwargs)))\n</code></pre>"},{"location":"api/view/#qcio.view.generate_structure_viewer_html","title":"generate_structure_viewer_html","text":"<pre><code>generate_structure_viewer_html(\n    *structs: Union[Structure, list[Structure]],\n    width: int | None = None,\n    height: int | None = None,\n    titles: list[str] | None = None,\n    subtitles: list[str] | None = None,\n    titles_extra: list[str] | None = None,\n    subtitles_extra: list[str] | None = None,\n    distances: list[tuple[int, int]] | None = None,\n    length_unit: LengthUnit = BOHR,\n    style: dict | None = None,\n    show_indices: bool = False,\n    same_viewer: bool = False,\n    view_2d: bool = False,\n    interval: int = 100,\n) -&gt; str\n</code></pre> <p>Generate the core HTML viewer for a Structure or list of Structures using py3Dmol or 2D PNG images. These keywords may be passed to high level viewer functions.</p> <p>Parameters:</p> Name Type Description Default <code>structs</code> <code>Union[Structure, list[Structure]]</code> <p>The Structure or list of Structures to visualize.</p> <code>()</code> <code>width</code> <code>int | None</code> <p>The width of the viewer in pixels. Defaults to 600.</p> <code>None</code> <code>height</code> <code>int | None</code> <p>The height of the viewer in pixels. Defaults to 450.</p> <code>None</code> <code>titles</code> <code>list[str] | None</code> <p>The titles to display above the viewer. Will default to the Structure name if not provided.</p> <code>None</code> <code>subtitles</code> <code>list[str] | None</code> <p>The subtitles to display below the viewer.</p> <code>None</code> <code>titles_extra</code> <code>list[str] | None</code> <p>Extra text to display after the title. This is useful for adding additional context to a default title.</p> <code>None</code> <code>subtitles_extra</code> <code>list[str] | None</code> <p>Extra text to display after the subtitle. Useful for adding text after an autogenerated subtitle such as relative energy.</p> <code>None</code> <code>distances</code> <code>list[tuple[int, int]] | None</code> <p>A list of tuples of atom indices to display distances between.</p> <code>None</code> <code>length_unit</code> <code>LengthUnit</code> <p>The units to display the distances in. Defaults to bohr. May pass 'angstrom' to display in angstroms.</p> <code>BOHR</code> <code>style</code> <code>dict | None</code> <p>A dictionary of styles to apply to the viewer (for py3Dmol). Should be a dictionary for AtomStyleSpec https://3dmol.org/doc/AtomStyleSpec.html</p> <code>None</code> <code>show_indices</code> <code>bool</code> <p>Whether to show the atom indices in the viewer.</p> <code>False</code> <code>view_2d</code> <code>bool</code> <p>Whether to display the structure in 2D (PNG images).</p> <code>False</code> <code>interval</code> <code>int</code> <p>The interval in milliseconds for the animation.</p> <code>100</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The HTML string for the viewer.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If a list of Structures is passed and view_2d is True.</p> Source code in <code>src/qcio/view.py</code> <pre><code>def generate_structure_viewer_html(\n    *structs: Union[\"Structure\", list[\"Structure\"]],\n    width: int | None = None,\n    height: int | None = None,\n    titles: list[str] | None = None,\n    subtitles: list[str] | None = None,\n    titles_extra: list[str] | None = None,\n    subtitles_extra: list[str] | None = None,\n    distances: list[tuple[int, int]] | None = None,\n    length_unit: LengthUnit = LengthUnit.BOHR,\n    style: dict | None = None,\n    show_indices: bool = False,\n    same_viewer: bool = False,\n    view_2d: bool = False,\n    interval: int = 100,\n) -&gt; str:\n    \"\"\"\n    Generate the core HTML viewer for a Structure or list of Structures using py3Dmol\n    or 2D PNG images. These keywords may be passed to high level viewer functions.\n\n    Args:\n        structs: The Structure or list of Structures to visualize.\n        width: The width of the viewer in pixels. Defaults to 600.\n        height: The height of the viewer in pixels. Defaults to 450.\n        titles: The titles to display above the viewer. Will default to the Structure\n            name if not provided.\n        subtitles: The subtitles to display below the viewer.\n        titles_extra: Extra text to display after the title. This is useful for adding\n            additional context to a default title.\n        subtitles_extra: Extra text to display after the subtitle. Useful for adding\n            text after an autogenerated subtitle such as relative energy.\n        distances: A list of tuples of atom indices to display distances between.\n        length_unit: The units to display the distances in. Defaults to bohr. May\n            pass 'angstrom' to display in angstroms.\n        style: A dictionary of styles to apply to the viewer (for py3Dmol). Should be a\n            dictionary for AtomStyleSpec &lt;https://3dmol.org/doc/AtomStyleSpec.html&gt;\n        show_indices: Whether to show the atom indices in the viewer.\n        view_2d: Whether to display the structure in 2D (PNG images).\n        interval: The interval in milliseconds for the animation.\n\n    Returns:\n        str: The HTML string for the viewer.\n\n    Raises:\n        ValueError: If a list of Structures is passed and view_2d is True.\n    \"\"\"\n\n    # Set defaults\n    width = width or DEFAULT_WIDTH\n    height = height or DEFAULT_HEIGHT\n\n    titles = titles or []\n    subtitles = subtitles or []\n    titles_extra = titles_extra or []\n    subtitles_extra = subtitles_extra or []\n\n    # Start HTML with flex container\n    html_parts = [\n        '&lt;div style=\"display: flex; flex-wrap: wrap; justify-content: center;\"&gt;'\n    ]\n\n    if not view_2d:\n        # Create the viewer\n        if len(structs) == 1 or same_viewer:\n            viewer = p3d.view(width=width, height=height)\n        else:\n            # Determine the number of rows needed for multiple structures\n            rows = math.ceil(len(structs) / 2)\n            viewer = p3d.view(\n                width=width * 2,\n                height=height * rows,\n                linked=False,\n                viewergrid=(rows, 2),\n            )\n\n    for i, (struct, title, subtitle, title_extra, subtitle_extra) in enumerate(\n        zip_longest(structs, titles, subtitles, titles_extra, subtitles_extra)\n    ):\n        # Set the title and subtitle\n        if isinstance(struct, list):\n            name = struct[0].ids.name\n        else:\n            name = struct.ids.name\n\n        title = f\"{title or name or ''}\"\n        title_extra = f\"{title_extra or ''}\"\n        subtitle = f\"{subtitle or ''}\"\n        subtitle_extra = f\"{subtitle_extra or ''}\"\n\n        if view_2d:\n            if isinstance(struct, list):\n                raise ValueError(\n                    \"Cannot display multiple 2D structures in one viewer. Do not submit\"\n                    \" Structures in a list. If you want to view multiple structures, \"\n                    \"unpack your list with *my_list_of_structures.\"\n                )\n            adjusted_width, adjusted_height = int(width * 0.75), int(height * 0.75)\n            mol = Chem.MolFromSmiles(struct.ids.smiles or struct.to_smiles())  # type: ignore\n            img = Draw.MolToImage(mol, size=(adjusted_width, adjusted_height))\n            buf = io.BytesIO()\n            img.save(buf, format=\"PNG\")\n            img_str = base64.b64encode(buf.getvalue()).decode(\"utf-8\")\n\n            html_parts.append(\n                f'&lt;div style=\"margin: 10px; text-align: center; padding: 15px; width: '\n                f'{adjusted_width}px; height: {adjusted_height + 60}px;\"&gt;'\n                f\"&lt;h2&gt;{title} {title_extra}&lt;/h2&gt;\"\n                f'&lt;img src=\"data:image/png;base64,{img_str}\" width=\"{adjusted_width}\" '\n                f'height=\"{adjusted_height}\"/&gt;'\n                f\"&lt;h4&gt;{subtitle} {subtitle_extra}&lt;/h4&gt;\"\n                f\"&lt;/div&gt;\"\n            )\n        else:\n            if same_viewer:\n                # No grid for single viewer (better performance than (1,1) grid)\n                viewer_kwargs = {}\n            else:\n                # Sets the viewer to the correct grid position\n                viewer_kwargs = {\"viewer\": divmod(i, 2)}\n\n            if isinstance(struct, list):  # Animate lists of structures\n                combined_xyz = \"\".join(s.to_xyz() for s in struct)\n                viewer.addModelsAsFrames(combined_xyz, \"xyz\", **viewer_kwargs)\n                viewer.animate(\n                    {\"loop\": \"forward\", \"interval\": interval}, **viewer_kwargs\n                )\n            else:\n                viewer.addModel(struct.to_xyz(), \"xyz\", **viewer_kwargs)\n\n            viewer.addLabel(\n                f\"{title} {title_extra}\",\n                {\n                    \"position\": {\"x\": width / 2, \"y\": 0, \"z\": 0},\n                    \"alignment\": \"topCenter\",\n                    \"fontSize\": 24,\n                    \"backgroundOpacity\": 0,\n                    \"fontColor\": \"black\",\n                    \"useScreen\": True,\n                },\n                **viewer_kwargs,\n            )\n\n            viewer.addLabel(\n                f\"{subtitle} {subtitle_extra}\",\n                {\n                    \"position\": {\"x\": width / 2, \"y\": height, \"z\": 0},\n                    \"alignment\": \"bottomCenter\",\n                    \"fontSize\": 20,\n                    \"backgroundOpacity\": 0,\n                    \"fontColor\": \"black\",\n                    \"useScreen\": True,\n                },\n                **viewer_kwargs,\n            )\n            if distances:\n                assert isinstance(struct, Structure), (\n                    \"Displaying distances for lists of structures is not yet implemented\"\n                )\n                for atom1, atom2 in distances:\n                    a1_coords = struct.geometry_angstrom[atom1]\n                    a2_coords = struct.geometry_angstrom[atom2]\n                    # Add line between the two atoms\n                    viewer.addLine(\n                        {\n                            \"start\": {\n                                \"x\": a1_coords[0],\n                                \"y\": a1_coords[1],\n                                \"z\": a1_coords[2],\n                            },\n                            \"end\": {\n                                \"x\": a2_coords[0],\n                                \"y\": a2_coords[1],\n                                \"z\": a2_coords[2],\n                            },\n                            \"color\": \"red\",\n                            \"linewidth\": 2,\n                        },\n                        **viewer_kwargs,\n                    )\n                    # Add a label showing the distance\n                    midpoint = (a1_coords + a2_coords) / 2\n                    distance = struct.distance(atom1, atom2, units=length_unit)\n                    unit = \"a\u2080\"\n\n                    if length_unit == LengthUnit.ANGSTROM:\n                        unit = \"\u00c5\"\n\n                    viewer.addLabel(\n                        f\"{distance:.2f} {unit}\",\n                        {\n                            \"position\": {\n                                \"x\": midpoint[0],\n                                \"y\": midpoint[1],\n                                \"z\": midpoint[2],\n                            },\n                            \"backgroundColor\": \"white\",\n                            \"fontSize\": 14,\n                            \"fontColor\": \"black\",\n                        },\n                        **viewer_kwargs,\n                    )\n\n            if show_indices:\n                ang_geom = (\n                    struct.geometry_angstrom\n                    if not isinstance(struct, list)\n                    else struct[0].geometry_angstrom\n                )\n                for j, coord in enumerate(ang_geom):\n                    viewer.addLabel(\n                        str(j),\n                        {\"position\": {\"x\": coord[0], \"y\": coord[1], \"z\": coord[2]}},\n                        **viewer_kwargs,\n                    )\n\n    if not view_2d:\n        viewer.setStyle(style or {\"stick\": {}, \"sphere\": {\"scale\": 0.3}})\n        viewer.zoomTo()\n        html_parts.append(f\"{viewer.write_html()}\")\n\n    html_parts.append(\"&lt;/div&gt;\")\n    return \"\".join(html_parts)\n</code></pre>"},{"location":"api/view/#qcio.view.generate_output_table","title":"generate_output_table","text":"<pre><code>generate_output_table(*results: Results) -&gt; str\n</code></pre> <p>Generate an HTML table displaying the basic parameters for Results objects.</p> <p>Parameters:</p> Name Type Description Default <code>*results</code> <code>Results</code> <p>The Results objects to display.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of HTML displaying the Results objects in a table.</p> Source code in <code>src/qcio/view.py</code> <pre><code>def generate_output_table(*results: Results) -&gt; str:\n    \"\"\"\n    Generate an HTML table displaying the basic parameters for Results objects.\n\n    Args:\n        *results: The Results objects to display.\n\n    Returns:\n        str: A string of HTML displaying the Results objects in a table.\n    \"\"\"\n    styles = \"\"\"\n    &lt;style&gt;\n        table {\n            border-collapse: collapse;\n            width: 100%;\n        }\n        th, td {\n            border: 1px solid black;\n            padding: 8px;\n            text-align: left;\n        }\n        .inner-table {\n            border: none;\n            width: 100%;\n        }\n        .inner-table td {\n            border: none;\n            padding: 2px 5px;\n        }\n        .key, .value {\n            text-align: left;\n            white-space: nowrap;\n        }\n    &lt;/style&gt;\n    \"\"\"\n\n    table_header = \"\"\"\n    &lt;table&gt;\n        &lt;tr&gt;\n            &lt;th&gt;Structure&lt;/th&gt;\n            &lt;th&gt;Success&lt;/th&gt;\n            &lt;th&gt;Wall Time&lt;/th&gt;\n            &lt;th&gt;Calculation Type&lt;/th&gt;\n            &lt;th&gt;Program&lt;/th&gt;\n            &lt;th&gt;Model&lt;/th&gt;\n            &lt;th&gt;Keywords&lt;/th&gt;\n    \"\"\"\n    if any(res.input_data.files for res in results):\n        table_header += \"&lt;th&gt;Input Files&lt;/th&gt;\"\n\n    if any(isinstance(res.input_data, DualProgramInput) for res in results):\n        table_header += \"\"\"\n            &lt;th&gt;Subprogram&lt;/th&gt;\n            &lt;th&gt;Subprogram Model&lt;/th&gt;\n            &lt;th&gt;Subprogram Keywords&lt;/th&gt;\n        \"\"\"\n    table_header += \"&lt;/tr&gt;\"\n\n    table_rows = []\n    for res in results:\n        success_style = (\n            'style=\"color: green; font-weight: bold;\"'\n            if res.success\n            else 'style=\"color: red; font-weight: bold;\"'\n        )\n        base_row = f\"\"\"\n        &lt;tr&gt;\n            &lt;td&gt;{\n            generate_dictionary_string(\n                {\n                    \"charge\": res.input_data.structure.charge,\n                    \"multiplicity\": res.input_data.structure.multiplicity,\n                    \"name\": res.input_data.structure.ids.name or \"\",\n                }\n            )\n        }&lt;/td&gt;\n            &lt;td {success_style}&gt;{res.success}&lt;/td&gt;\n            &lt;td&gt; {\n            _format_time(res.provenance.wall_time)\n            if res.provenance.wall_time\n            else \"No timing data\"\n        }&lt;/td&gt;\n            &lt;td&gt;{res.input_data.calctype.name}&lt;/td&gt;\n            &lt;td&gt;{f\"{res.provenance.program} {res.provenance.program_version or ''}\"}&lt;/td&gt;\n            &lt;td&gt;{\n            generate_dictionary_string(\n                res.input_data.model.model_dump(exclude=[\"extras\"])\n            )\n            if res.input_data.model\n            else \"\"\n        }&lt;/td&gt;\n            &lt;td&gt;{generate_dictionary_string(res.input_data.keywords)}&lt;/td&gt;\n        \"\"\"\n        if res.input_data.files:\n            base_row += f\"&lt;td&gt;{generate_files_string(res.input_data.files)}&lt;/td&gt;\"\n\n        if isinstance(res.input_data, DualProgramInput):\n            base_row += f\"\"\"\n            &lt;td&gt;{res.input_data.subprogram}&lt;/td&gt;\n            &lt;td&gt;{res.input_data.subprogram_args.model}&lt;/td&gt;\n            &lt;td&gt;{generate_dictionary_string(res.input_data.subprogram_args.keywords)}&lt;/td&gt;\n            \"\"\"\n        base_row += \"&lt;/tr&gt;\"\n        table_rows.append(base_row)\n\n    table_footer = \"&lt;/table&gt;\"\n    return styles + table_header + \"\\n\".join(table_rows) + table_footer\n</code></pre>"},{"location":"api/view/#qcio.view.generate_optimization_plot","title":"generate_optimization_plot","text":"<pre><code>generate_optimization_plot(\n    prog_output: Results, figsize=(6.4, 4.8), grid=True\n) -&gt; str\n</code></pre> <p>Generate a plot of the energy optimization by cycle for a single Results.</p> <p>Parameters:</p> Name Type Description Default <code>prog_output</code> <code>Results</code> <p>The Results to generate the plot for.</p> required <code>figsize</code> <p>The size of the figure in inches.</p> <code>(6.4, 4.8)</code> <code>grid</code> <p>Whether to display grid lines on the plot.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string of HTML displaying the plot as a png image encoded in base64.</p> Source code in <code>src/qcio/view.py</code> <pre><code>def generate_optimization_plot(\n    prog_output: Results, figsize=(6.4, 4.8), grid=True\n) -&gt; str:\n    \"\"\"\n    Generate a plot of the energy optimization by cycle for a single Results.\n\n    Args:\n        prog_output: The Results to generate the plot for.\n        figsize: The size of the figure in inches.\n        grid: Whether to display grid lines on the plot.\n\n    Returns:\n        str: A string of HTML displaying the plot as a png image encoded in base64.\n    \"\"\"\n    energies = prog_output.data.energies * constants.HARTREE_TO_KCAL_PER_MOL\n    baseline_energy = energies[0]\n    relative_energies = energies - baseline_energy\n    last_is_nan = np.isnan(relative_energies[-1])\n\n    if last_is_nan:\n        try:\n            delta_E = relative_energies[-2]\n        except IndexError:\n            # If there is only one energy point, set delta_E to nan\n            delta_E = np.nan\n    else:\n        delta_E = relative_energies[-1]\n\n    fig, ax1 = plt.subplots(figsize=figsize)\n    color = \"tab:blue\"\n    ax1.set_xlabel(\"Optimization Cycle\")\n    ax1.set_ylabel(\"Relative Energy (kcal/mol)\", color=color)\n    ax1.plot(relative_energies, label=\"Energy\", marker=\"o\", color=\"green\")\n    if last_is_nan:\n        ax1.plot(len(relative_energies) - 1, delta_E, marker=\"x\", color=\"red\")\n    ax1.tick_params(axis=\"y\", labelcolor=color)\n    ax1.text(\n        0.95,\n        0.85,\n        f\"\u0394E = {delta_E:.2f} kcal/mol\",\n        verticalalignment=\"top\",\n        horizontalalignment=\"right\",\n        transform=ax1.transAxes,\n        color=\"black\",\n        fontsize=14,\n    )\n    plt.title(\"Energy Optimization by Cycle\", pad=20)\n    ax1.legend(loc=\"upper right\")\n    fig.tight_layout(rect=(0, 0, 1, 0.95))\n\n    buf = io.BytesIO()\n    plt.savefig(buf, format=\"png\", bbox_inches=\"tight\")\n    buf.seek(0)\n    image_base64 = base64.b64encode(buf.read()).decode(\"utf-8\")\n    buf.close()\n    plt.close(fig)  # Close the figure to avoid duplicate plots\n    return (\n        f'&lt;img src=\"data:image/png;base64,{image_base64}\" alt=\"Energy Optimization by '\n        f'Cycle\" style=\"width: 100%; max-width: {DEFAULT_WIDTH}px;\"&gt;'\n    )\n</code></pre>"},{"location":"visualizations/coreviews/","title":"Core Views","text":"<p>A quick overview of all possible views within <code>qcio</code>.</p> <pre><code>from qcio import Results, view\n\n# Defaults changed just to fit the examples within the narrow documentation layout\nview.DEFAULT_WIDTH = 400\nview.DEFAULT_HEIGHT = 300\n\nxtb_opt = Results.open(\"U1-_180_mmff94s-opt-xtb.json\")\nterachem_opt = Results.open(\"U1-_mmff94s_180-opt-terachem-thf.json\")\ncrest_confsearch = Results.open(\"U1-_confsearch-crest.json\")\n</code></pre> <pre><code>view.view(\n    xtb_opt.input_data.structure, \n    subtitles=[\"My Awesome Subtitle\"]\n)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <p>Pass <code>view_2d=True</code> for a 2D image of the molecule.</p> <pre><code>view.view(\n    xtb_opt.input_data.structure, \n    view_2d=True, \n    subtitles=[\"My Awesome Subtitle\"]\n)\n</code></pre> <pre><code>view.view(\n    xtb_opt.input_data.structure, xtb_opt.results.final_structure, \n    titles=['Initial Structure', 'Final Structure'], \n    subtitles=[\"First Subtitle\", \"Second Subtitle\"],\n    show_indices=True,\n)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>view.view(\n    xtb_opt.input_data.structure, xtb_opt.results.final_structure, \n    same_viewer=True,\n    subtitles=[\"First and Last Structure\"],\n)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>view.view(\n    xtb_opt.results.structures, terachem_opt.results.structures, \n    titles=['xtb Opt', 'TeraChem Opt'],\n    subtitles=['Successful Trajectory', 'Failed Opt Trajectory'],\n)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>view.view(\n    xtb_opt.results.trajectory[0], \n    subtitles=[\"A Subtitle for the Structure\"]\n)\n</code></pre> Structure Success Wall Time Calculation Type Program Model Keywords charge -1 multiplicity 1 name U1- 180 True  00.09s gradient xtb 22.1 method GFN2xTB basis None solvent 13 <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> Result Value energy -107.07214860598548 gradient[[5.94e-02 -6.73e-04 -1.02e-02]  [1.54e-02 -1.44e-03 -1.14e-02]  [2.13e-02 8.42e-04 1.78e-03]  ...  [-1.21e-03 7.30e-04 6.00e-03]  [5.60e-03 -4.61e-04 -3.16e-03]  [-2.50e-03 -7.75e-04 -5.17e-03]]wavefunctionscf_eigenvalues_a=array([-8.78e-01, -8.76e-01, -8.76e-01, ..., 5.85e-01, 6.02e-01, 7.60e-01])scf_dipole_moment[1.8777798514342063, -0.021687969861866857, -0.4637756180825757] <pre><code>view.view(\n    xtb_opt, \n    animate=True, \n    subtitles=[\"Some nice subtitle\"], \n    titles_extra=[\"Optimization Trajectory\"]\n)\n</code></pre> Structure Success Wall Time Calculation Type Program Model Keywords Subprogram Subprogram Model Subprogram Keywords charge -1 multiplicity 1 name U1- 180 True  33.29s optimization geometric 1.0.2 transition False xtb method='GFN2xTB' solvent 13 <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <p>If you have too many molecule viewers or animations running and your browser is slowing down, pass <code>view_2d=True</code> to any view to substitute a static 2D molecule image.</p> <pre><code>view.view(\n    xtb_opt, \n    animate=False, \n    view_2d=True,\n)\n</code></pre> Structure Success Wall Time Calculation Type Program Model Keywords Subprogram Subprogram Model Subprogram Keywords charge -1 multiplicity 1 name U1- 180 True  33.29s optimization geometric 1.0.2 transition False xtb method='GFN2xTB' solvent 13 <pre><code>view.view(crest_confsearch)\n</code></pre> Structure Success Wall Time Calculation Type Program Model Keywords charge -1 multiplicity 1 name True  15m:23.10s conformer_search crest 3.0.1 method gfn2 basis None <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <p> </p>"},{"location":"visualizations/coreviews/#structure-views","title":"Structure Views","text":""},{"location":"visualizations/coreviews/#basic-structure","title":"Basic Structure","text":"<p>Pass in a structure to visualize it. If <code>structure.ids.name</code> or <code>structure.ids.smiles</code> is set this will be used automatically for a title. Subtitles can be passed manually.</p>"},{"location":"visualizations/coreviews/#u1-180","title":"U1- 180","text":"My Awesome Subtitle"},{"location":"visualizations/coreviews/#multi-structure","title":"Multi-Structure","text":"<p>Pass multiple <code>Structure</code> objects to <code>view.view(...)</code> and it will create a grid of <code>Structure</code> objects. Pass <code>titles</code> and <code>subtitles</code> as desired. <code>show_indices=True</code> will display the indices for each atom.</p>"},{"location":"visualizations/coreviews/#overlay-structures","title":"Overlay Structures","text":"<p>Set <code>same_viewer=True</code> to overlay two (or more) <code>Structure</code> objects in the same viewer.</p>"},{"location":"visualizations/coreviews/#animation","title":"Animation","text":"<p>Pass one or more list of <code>Structure</code> objects to <code>view.view(...)</code> and each list will be animated. The <code>.results.structures</code> objects passed below are lists of <code>Structure</code>.</p>"},{"location":"visualizations/coreviews/#results-views","title":"Results Views","text":"<p>Simply pass any <code>Results</code> object to <code>view.view(...)</code> to see a visualization of the results.</p>"},{"location":"visualizations/coreviews/#single-point-calculation","title":"Single Point Calculation","text":""},{"location":"visualizations/coreviews/#optimization","title":"Optimization","text":"<p>May pass <code>animate=False</code> if the animations are slowing down the browser.</p>"},{"location":"visualizations/coreviews/#u1-180-final-structure","title":"U1- 180  (Final Structure)","text":""},{"location":"visualizations/coreviews/#conformer-search","title":"Conformer Search","text":""},{"location":"visualizations/overview/","title":"Overview","text":"<p>Being able to quickly and easily visualize results is critical for efficient scientific work. <code>qcio</code> come with build-in visualizations for all objects.</p> <p>Install the visualization module and its required dependencies:</p> <pre><code>python -m pip install qcio[view]\n</code></pre> <p>OR</p> <pre><code>python -m pip install qcio[all]\n</code></pre> <p>Then in a Jupyter Notebook import the <code>view</code> module and call <code>view.view(...)</code> on any <code>Structure</code> or <code>Results</code> object to instantly visualize your results. Click on the examples on the left to see this in action \u2728!</p>"},{"location":"visualizations/results/","title":"Results","text":"<pre><code>from qcio import Results, view\n\n# width and height adjusted only to fit in the documentation\nview.DEFAULT_WIDTH = 400\nview.DEFAULT_HEIGHT = 300\n</code></pre> <pre><code>xtb_opt = Results.open(\"U1-_180_mmff94s-opt-xtb.json\")\nview.view(xtb_opt)\n</code></pre> Structure Name Success Wall Time Calculation Type Program Model Keywords Subprogram Subprogram Model Subprogram Keywords U1- 180 True  33.29s optimization geometric 1.0.2 None transition False xtb method='GFN2xTB' solvent 13 <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code># Inspect a single frame. This will be the data for a single point calculation\nview.view(xtb_opt.data.trajectory[-1], width=400, height=350)\n</code></pre> Structure Name Success Wall Time Calculation Type Program Model Keywords U1- 180 True  00.11s gradient xtb 22.1 method='GFN2xTB' solvent 13 <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> Result Value energy -107.10522600430896 gradient[[-4.56e-06 3.71e-06 6.44e-06]  [1.43e-05 -7.55e-06 -1.37e-05]  [-3.00e-05 4.14e-06 6.49e-06]  ...  [-1.65e-06 -2.06e-06 1.82e-06]  [2.58e-07 1.61e-06 -3.86e-07]  [6.86e-07 4.06e-07 -5.27e-07]]wavefunctionscf_eigenvalues_a=array([-8.82e-01, -8.78e-01, -8.76e-01, ..., 6.20e-01, 6.40e-01, 7.22e-01])scf_dipole_moment[2.539495698908995, 0.0731010162381856, -0.09885011683875564] <pre><code>view.view(xtb_opt.data.trajectory[-1])\n</code></pre> Structure Name Success Wall Time Calculation Type Program Model Keywords U1- 180 True  00.11s gradient xtb 22.1 method='GFN2xTB' solvent 13 <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> Result Value energy -107.10522600430896 gradient[[-4.56e-06 3.71e-06 6.44e-06]  [1.43e-05 -7.55e-06 -1.37e-05]  [-3.00e-05 4.14e-06 6.49e-06]  ...  [-1.65e-06 -2.06e-06 1.82e-06]  [2.58e-07 1.61e-06 -3.86e-07]  [6.86e-07 4.06e-07 -5.27e-07]]wavefunctionscf_eigenvalues_a=array([-8.82e-01, -8.78e-01, -8.76e-01, ..., 6.20e-01, 6.40e-01, 7.22e-01])scf_dipole_moment[2.539495698908995, 0.0731010162381856, -0.09885011683875564] <pre><code>tc_opt = Results.open(\"U1-_mmff94s_180-opt-terachem-thf.json\")\nview.view(tc_opt, width=400, height=350, titles=[\"Failed TeraChem Optimization\"])\ntc_opt.plogs\n</code></pre> Structure Name Success Wall Time Calculation Type Program Model Keywords Subprogram Subprogram Model Subprogram Keywords None False  01h:10m:12.53s optimization geometric  None transition False terachem method='uwb97xd3' basis='def2-svpd' purify no pcm cosmo epsilon 7.58 <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre>\n<code>| Startfile from command line: tc.in\n\n\n|       ***********************************************************\n|       *                 TeraChem v1.9-2023.09-dev               *\n|       *                   Development Version                   *\n|       *           Chemistry at the Speed of Graphics!           *\n|       ***********************************************************\n|       * This program may only be used in connection with        *\n|       * a valid license from PetaChem, LLC. Use of this program *\n|       * or results thereof indicates acceptance of all terms    *\n|       * and conditions stated in the license and that a valid   *\n|       * license agreement between the user and PetaChem, LLC    *\n|       * exists. PetaChem, LLC does not warrant the correctness  *\n|       * of results or their suitability for any purpose.        *\n|       * Please email bugs, suggestions, and comments to         *\n|       *                  help@petachem.com                      *\n|       *                                                         *\n|       ***********************************************************\n\n\n|       ***********************************************************\n|       *  Compiled by root         Fri Sep  8 05:34:30 UTC 2023  *\n|       *  Supported architecture SMs: 86                         *\n|       *  Build cuda_11.8.r11.8/compiler.31833905_0              *\n|       *  Git Version: 2407d3d72955905cdd9c0dae51e9322b8c05fd4c  *\n|       ***********************************************************\n\n\n| Job started   Wed Jul 10 01:29:43 2024\n| On 15c54af37440 (available memory: 30131 MB)\n\n| ######################################### RUNTIME INFO ##########################################\n| terachem  tc.in \n\n|  NVRM version: NVIDIA UNIX x86_64 Kernel Module  550.90.07  Fri May 31 09:35:42 UTC 2024\n|  GCC version:  gcc version 11.4.0 (Ubuntu 11.4.0-1ubuntu1~22.04) \n\n|   linux-vdso.so.1 (0x00007ffc671e3000)\n|   libcurl.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libcurl.so.4 (0x00007f57c68cc000)\n|   libz.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libz.so.1 (0x00007f57c68b0000)\n|   libmpi.so.12 =&gt; /opt/terachem/lib/libmpi.so.12 (0x00007f57c5000000)\n|   libdftbplus.so =&gt; /opt/terachem/lib/libdftbplus.so (0x00007f57c4cc8000)\n|   libfsockets.so =&gt; /opt/terachem/lib/libfsockets.so (0x00007f57c68a7000)\n|   libxmlf90.so =&gt; /opt/terachem/lib/libxmlf90.so (0x00007f57c6880000)\n|   libthcbox.so.1 =&gt; /opt/terachem/lib/libthcbox.so.1 (0x00007f57c43c4000)\n|   libOpenMM.so =&gt; /opt/terachem/lib/libOpenMM.so (0x00007f57c3f6a000)\n|   libnvToolsExt.so.1 =&gt; /opt/terachem/lib/libnvToolsExt.so.1 (0x00007f57c3c00000)\n|   libgpubox.so.1 =&gt; /opt/terachem/lib/libgpubox.so.1 (0x00007f57c6875000)\n|   libtensorbox.so.1 =&gt; /opt/terachem/lib/libtensorbox.so.1 (0x00007f57c6858000)\n|   libiobox.so.1 =&gt; /opt/terachem/lib/libiobox.so.1 (0x00007f57c6852000)\n|   libintbox.so.1 =&gt; /opt/terachem/lib/libintbox.so.1 (0x00007f57afe25000)\n|   libsqmbox.so.1 =&gt; /opt/terachem/lib/libsqmbox.so.1 (0x00007f57afa86000)\n|   libgridbox.so.1 =&gt; /opt/terachem/lib/libgridbox.so.1 (0x00007f57af75e000)\n|   libdftbox.so.1 =&gt; /opt/terachem/lib/libdftbox.so.1 (0x00007f57c3e7b000)\n|   libcibox.so.1 =&gt; /opt/terachem/lib/libcibox.so.1 (0x00007f57af4ed000)\n|   libccbox.so.1 =&gt; /opt/terachem/lib/libccbox.so.1 (0x00007f57af160000)\n|   libsimbox.so.1 =&gt; /opt/terachem/lib/libsimbox.so.1 (0x00007f57c3e5e000)\n|   liboptbox.so.1 =&gt; /opt/terachem/lib/liboptbox.so.1 (0x00007f57c3e29000)\n|   libprotobuf.so.25 =&gt; /opt/terachem/lib/libprotobuf.so.25 (0x00007f57aecf7000)\n|   libcommbox.so.1 =&gt; /opt/terachem/lib/libcommbox.so.1 (0x00007f57aec97000)\n|   libssl.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libssl.so.3 (0x00007f57aebf3000)\n|   libcrypto.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libcrypto.so.3 (0x00007f57ae7b1000)\n|   libcuda.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libcuda.so.1 (0x00007f57acc06000)\n|   libcudart.so.11.0 =&gt; /opt/terachem/lib/libcudart.so.11.0 (0x00007f57ac800000)\n|   libcublas.so.11 =&gt; /opt/terachem/lib/libcublas.so.11 (0x00007f57a6a00000)\n|   libcufft.so.10 =&gt; /opt/terachem/lib/libcufft.so.10 (0x00007f5795a00000)\n|   libcusparse.so.11 =&gt; /opt/terachem/lib/libcusparse.so.11 (0x00007f5784c00000)\n|   libcusolver.so.11 =&gt; /opt/terachem/lib/libcusolver.so.11 (0x00007f5772800000)\n|   libcublasLt.so.11 =&gt; /opt/terachem/lib/libcublasLt.so.11 (0x00007f574e200000)\n|   libimf.so =&gt; /opt/terachem/lib/libimf.so (0x00007f574da00000)\n|   libsvml.so =&gt; /opt/terachem/lib/libsvml.so (0x00007f574ba00000)\n|   libirng.so =&gt; /opt/terachem/lib/libirng.so (0x00007f574b600000)\n|   libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f574b3d6000)\n|   libm.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libm.so.6 (0x00007f57ac719000)\n|   libiomp5.so =&gt; /opt/terachem/lib/libiomp5.so (0x00007f574ae00000)\n|   libcilkrts.so.5 =&gt; /opt/terachem/lib/libcilkrts.so.5 (0x00007f574aa00000)\n|   libgcc_s.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f57acb42000)\n|   libintlc.so.5 =&gt; /opt/terachem/lib/libintlc.so.5 (0x00007f574a600000)\n|   libc.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libc.so.6 (0x00007f574a3d8000)\n|   /lib64/ld-linux-x86-64.so.2 (0x00007f57c6978000)\n|   libnghttp2.so.14 =&gt; /usr/lib/x86_64-linux-gnu/libnghttp2.so.14 (0x00007f57acb18000)\n|   libidn2.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libidn2.so.0 (0x00007f57acaf7000)\n|   librtmp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/librtmp.so.1 (0x00007f57c3e0a000)\n|   libssh.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libssh.so.4 (0x00007f57ac6ac000)\n|   libpsl.so.5 =&gt; /usr/lib/x86_64-linux-gnu/libpsl.so.5 (0x00007f57c6838000)\n|   libgssapi_krb5.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00007f57a69ac000)\n|   libldap-2.5.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libldap-2.5.so.0 (0x00007f57a694d000)\n|   liblber-2.5.so.0 =&gt; /usr/lib/x86_64-linux-gnu/liblber-2.5.so.0 (0x00007f57acae6000)\n|   libzstd.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libzstd.so.1 (0x00007f5795931000)\n|   libbrotlidec.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libbrotlidec.so.1 (0x00007f57acad8000)\n|   librt.so.1 =&gt; /usr/lib/x86_64-linux-gnu/librt.so.1 (0x00007f57acad3000)\n|   libdl.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libdl.so.2 (0x00007f57acace000)\n|   libifport.so.5 =&gt; /opt/terachem/lib/libifport.so.5 (0x00007f574a000000)\n|   libifcoremt.so.5 =&gt; /opt/terachem/lib/libifcoremt.so.5 (0x00007f574b240000)\n|   libpthread.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f57acac9000)\n|   libunistring.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libunistring.so.2 (0x00007f574ac56000)\n|   libgnutls.so.30 =&gt; /usr/lib/x86_64-linux-gnu/libgnutls.so.30 (0x00007f5749e15000)\n|   libhogweed.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libhogweed.so.6 (0x00007f57ac664000)\n|   libnettle.so.8 =&gt; /usr/lib/x86_64-linux-gnu/libnettle.so.8 (0x00007f57a6907000)\n|   libgmp.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libgmp.so.10 (0x00007f5784b7e000)\n|   libkrb5.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libkrb5.so.3 (0x00007f574e135000)\n|   libk5crypto.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00007f5795902000)\n|   libcom_err.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libcom_err.so.2 (0x00007f57acac3000)\n|   libkrb5support.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00007f57acab5000)\n|   libsasl2.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libsasl2.so.2 (0x00007f57a68ec000)\n|   libbrotlicommon.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libbrotlicommon.so.1 (0x00007f5784b5b000)\n|   libp11-kit.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libp11-kit.so.0 (0x00007f574a8c5000)\n|   libtasn1.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libtasn1.so.6 (0x00007f5784b43000)\n|   libkeyutils.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00007f57acaae000)\n|   libresolv.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libresolv.so.2 (0x00007f5784b2f000)\n|   libffi.so.8 =&gt; /usr/lib/x86_64-linux-gnu/libffi.so.8 (0x00007f57a68df000)\n| #################################################################################################\n\n| Checking Amazon Cloud instance ID...   Not found\n| Cannot find license.dat file /opt/terachem/license.dat\n\n\n| TRYING THE NETWORK LICENSE...\n| Connecting to license server '54.208.252.40' port '8877'...\n| Connected!\n| Checking your license...\n\n| **************************************************************\n|  Greetings, Martinez Group! You have 1000 licenses in total\n|  IN USE: 35\n|  AVAILABLE: 965\n| **************************************************************\n\n-----------------------------------\nProcessed Input file:\n                      run gradient\n              coordinates geometry.xyz\n                   charge -1\n                 spinmult 1\n                   method uwb97xd3\n                    basis def2-svpd\n                   purify no\n                      pcm cosmo\n                  epsilon 7.58\n-----------------------------------\nJobname: geometry\nScratch data will be generated\nScratch directory: ./scr.geometry\n| Random number seed: 1930151181\n\nXYZ coordinates geometry.xyz\nMolden File Output: ./scr.geometry/geometry.molden\nUsing basis set: def2-svpd\ndmrgstart not found\nSpin multiplicity: 1\nDIIS will use up to 10 vectors.\nCondition number limit for the DIIS overlap matrix is            0\nWF convergence threshold: 3.00e-05\nUsing DIIS algorithm to converge WF\nMaximum number of SCF iterations: 100\nIncremental fock with rebuild every 8 iterations\nWill switch to conventional Fock if diffuse functions are detected\nX-matrix tolerance: 1.00e-04\nPRECISION: DYNAMIC\nTeraChem will select linear algebra engine\nDensity matrix purification turned off\nDFT Functional requested: wb97xd3\nMethod: wB97X-D3\n  wB97X-D3 exchange/correlation functional:  1.0\n  Full range Hartree-Fock exchange:          0.195728\n  LR Hartree-Fock exchange:                  0.804272\n  Range Correction Scaling:                  0.250 a.u. \nWavefunction: UNRESTRICTED\n\n DFT-D code reimplemented following the\n code by S.Grimme, University Bonn \n based on DFTD3 V3.2 Rev 0         \n\nPlease cite DFT-D3 work done with this code as:\nS. Grimme, J. Antony, S. Ehrlich and H. Krieg,\nJ. Chem. Phys. 132 (2010), 154104\nIf used with BJ-damping cite also\nS. Grimme, S. Ehrlich and L. Goerigk,\nJ. Comput. Chem. 32 (2011), 1456-1465\nFor DFT-D2 the reference is\nS. Grimme, J. Comput. Chem., 27 (2006), 1787-1799\nDFT grid type: 1\nUsing dynamic DFT grids.\nInitial guess generated by maximum overlap\n\n********************************************\n**** SINGLE POINT GRADIENT CALCULATIONS ****\n********************************************\nSCF:   Initial guess is taken from previous step\nCOSMO model for polarizable continuum model enabled\nStarting TensorBox...\n| TeraChem will select linear algebra engine\n| Using cuSolver for matrix diagonalization\n\n| using 1 out of 1 CUDA devices\n|   Device 0: NVIDIA GeForce RTX 3050 Ti Laptop GPU,  3897MB, CC 8.6 -- CPU THREAD 0\n| -------------------------------------------------------------------\n| CPU Memory Available: 8002.50 MegaWords \n| GPU Memory Available: 231.22 MegaWords \n| Maximum recommended basis set size: 5100 basis functions\n|  (limited by GPU memory)\n| -------------------------------------------------------------------\n| Initialize GPUBox with 128 MW of memory\n\n************************************* WARNING *************************************\n 37 out of 799 eigenvalues of the overlap matrix are smaller than xtol = 1.0e-04\n and will be flushed to zero. In many cases this is caused by bad geometry of the\n molecule, Cartesian basis sets, or the use of diffuse basis functions. \n Try using a spherical basis representation 'sphericalbasis yes'. If the SCF procedure does not\n converge, increase the threshold by setting 'xtol' to 1.0e-03 or 1.0e-02 and/or\n decrease the coulomb and exchange integral screening thresholds 'threall' \n up to 1.0e-12 or 1.0e-13. In addition, you can try to loosen the the WF \n convergence threshold, perform several geometry optimization steps, and run the \n calculations again with the new geometry. You can also try to switch to double\n precision instead of mixed (default) or single precision.\n***********************************************************************************\n\n\n\nBasis set:       def2-svpd\nTotal atoms:     39\nTotal charge:    -1\nTotal electrons: 240 (120-alpha, 120-beta)\nNumber electrons modeled by ECPs: 0\nTotal orbitals:  799\nTotal AO shells: 297 (142 S-shells; 91 P-shells; 64 D-shells; 0 F-shells; 0 G-shells)\nSpin multiplicity: 1\nNuclear repulsion energy (QM atoms): 3272.192576111733 a.u.\n\nDFTD Energy:    -0.0174733 hartree\n\n************************************* WARNING *************************************\n 37 out of 799 eigenvalues of the overlap matrix are smaller than xtol = 1.0e-04\n and will be flushed to zero. In many cases this is caused by bad geometry of the\n molecule, Cartesian basis sets, or the use of diffuse basis functions. \n Try using a spherical basis representation 'sphericalbasis yes'. If the SCF procedure does not\n converge, increase the threshold by setting 'xtol' to 1.0e-03 or 1.0e-02 and/or\n decrease the coulomb and exchange integral screening thresholds 'threall' \n up to 1.0e-12 or 1.0e-13. In addition, you can try to loosen the the WF \n convergence threshold, perform several geometry optimization steps, and run the \n calculations again with the new geometry. You can also try to switch to double\n precision instead of mixed (default) or single precision.\n***********************************************************************************\n\nSetting up the DFT grid...\n| time to set the grid = 0.03 s\nDFT grid points: 39181 (1004 points/atom)\nSetting up the DFT grid...\n| time to set the grid = 0.07 s\nDFT grid points: 110739 (2839 points/atom)\n=COSMO= Number of H atoms in QM atoms:7\n=COSMO= Number of Heavy atoms in QM atoms:32\n=COSMO= size of A matrix:38931488 bytes\n=COSMO= ++++++++++++++++++++++++++++++ COSMO parameters ++++++++++++++++++++++++++++++\n=COSMO= I. Cavity Information:\n=COSMO= SAS(Solvent accessible surface) initialization finished\n=COSMO= Time for initializing Molecular Surface:0.00178000 (sec)\n=COSMO= Time for initializing cosmo calculation:0.02837000 (sec)\n=COSMO= Cavity effective radius(Angstrom) (r_solv+r_vdw-dsc) was written into ./scr.geometry/ratom.txt\n=COSMO= Solvent Dielectric Constant:7.580000\n=COSMO= Cosmo Solvent radius:0.000000\n=COSMO= Cosmo charge scaling method:0\n=COSMO= Cavity built with Lebedev Grid\n=COSMO= Grid points/QM Hydrogen: 110\n=COSMO= Grid points/QM Heavy atom: 110\n=COSMO= Herbert Switching-Gaussian method turned on\n=COSMO= After removing points inside of SAS:\n=COSMO= Total number of segments on molecular surface:2206\n=COSMO= Number of segments belonging to QM atoms:2206\n=COSMO= Total surface area of cavity: 429.0066(Angstrom^2)\n=COSMO= Total volume of cavity: 258.1756 (Angstrom^3)\n=COSMO= II. COSMO integral options:\n=COSMO= Building COSMO c vector with original algorithm\n=COSMO= COSMO one-electron integral threshold: 1e-12 \n=COSMO= III. Linear solver options:\n=COSMO= Initialize COSMO for A matrix in full storage form\n=COSMO= CG preconditioner:Jacobi\n=COSMO= Tight CG convergence threshold:1e-06\n=COSMO= CG dynamic threshold: on\n=COSMO= Adjust CG convergence threshold dynamically\n=COSMO= IV. PCM field read/write options:\n=COSMO= PCM field is not written to files\n=COSMO= No PCM field file is read in\n=COSMO= ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n                      *** Start SCF Iterations ***\n\n Iter     DIIS Error       Energy change      Electrons        XC Energy           Energy              E_PCM      Time(s)\n-------------------------------------------------------------------------------------------------------------------------\n| Skip purify step\n| THRESPDP set to 1.00e+00\n|                 &gt;&gt;&gt; SWITCHING TO GRID 1 &lt;&lt;&lt;\n|    1     0.2124824652   -2025.0031909676   240.0022631143  -167.4559502310   -2025.0031909676     -0.0784900006    4.84  \nRotate HOMO and LUMO by 45.000000 degrees\n| THRESPDP set to 7.09e-04\n|                 &gt;&gt;&gt; SWITCHING TO GRID 0 &lt;&lt;&lt;\n|    2     0.0782452651      -6.5129061908   239.9843315665  -171.1110741576   -2031.5160971583     -0.1165767126   11.88  \n|    3     0.0487052084      -1.4085986308   239.9823899953  -171.3311188130   -2032.9246957891     -0.0754198071    9.70  \n|    4     0.0199188438      -0.2900805262   239.9828197914  -170.2418032845   -2033.2147763154     -0.0615010422    7.48  \n|    5     0.0031429359      -0.0295345204   239.9825690877  -170.5636576741   -2033.2443108357     -0.0652842209    6.44  \n|                 &gt;&gt;&gt; SWITCHING TO GRID 1 &lt;&lt;&lt;\n|    6     0.0028183286      -0.0002879022   240.0022692693  -170.5987523536   -2033.2445987380     -0.0649357557    8.02  \n|    7     0.0006657446      -0.0008249842   240.0022850580  -170.5741852718   -2033.2454237221     -0.0650772410    7.81  \n|    8     0.0009370480      -0.0001951782   240.0022949127  -170.5743587186   -2033.2456189003     -0.0653163291    7.76  \n|    9     0.0002150499      -0.0000442887   240.0022985806  -170.5740627901   -2033.2456631891     -0.0652828953   13.51  \n|   10     0.0001170891      -0.0000046985   240.0022978409  -170.5734136154   -2033.2456678876     -0.0652972101    7.65  \n|   11     0.0001673338      -0.0000013143   240.0022984712  -170.5739268358   -2033.2456692018     -0.0653088225    7.73  \n|   12     0.0002687635      +0.0000032707   240.0022986314  -170.5737944846   -2033.2456659311     -0.0653119737    7.65  \n|   13     0.0001951886      -0.0000038699   240.0022985027  -170.5738379630   -2033.2456698010     -0.0653114589    7.74  \n|   14     0.0002091970      -0.0000071368   240.0022987536  -170.5738202524   -2033.2456769378     -0.0653160864    7.83  \n|   15     0.0001526071      -0.0000025802   240.0022987292  -170.5737941187   -2033.2456795180     -0.0653132688    7.72  \n|   16     0.0001518863      -0.0000061286   240.0022985495  -170.5738993649   -2033.2456856465     -0.0653186541    7.96  \n|   17     0.0013667524      +0.0000337653   240.0022965285  -170.5738087336   -2033.2456518812     -0.0653157336   13.58  \n|   18     0.0008681336      -0.0000136871   240.0022985420  -170.5738113139   -2033.2456655684     -0.0653178687    8.41  \n|   19     0.0007375944      -0.0000055213   240.0022985030  -170.5738241546   -2033.2456710897     -0.0653177975    7.66  \n|   20     0.0006379514      -0.0000048263   240.0022984454  -170.5737871069   -2033.2456759160     -0.0653179723    8.06  \n|   21     0.0006104037      -0.0000028821   240.0022981944  -170.5738012170   -2033.2456787981     -0.0653166722    8.80  \n|   22     0.0009287480      +0.0000139232   240.0022983413  -170.5737835856   -2033.2456648749     -0.0653165688   15.39  \n|   23     0.0009219943      -0.0000002576   240.0022982674  -170.5738124497   -2033.2456651325     -0.0653166336   14.65  \n|   24     0.0007345711      -0.0000028828   240.0022983531  -170.5737907652   -2033.2456680154     -0.0653161106    8.36  \n|   25     0.0005769345      -0.0000038858   240.0022984038  -170.5738329583   -2033.2456719012     -0.0653163793    8.15  \n|   26     0.0006790814      +0.0000054160   240.0022984818  -170.5738410899   -2033.2456664853     -0.0653157348    8.25  \n|   27     0.0005331342      -0.0000050825   240.0022984663  -170.5738644030   -2033.2456715677     -0.0653166606    8.30  \n|   28     0.0007463772      +0.0000074048   240.0022967853  -170.5738240162   -2033.2456641629     -0.0653140981    8.99  \n|   29     0.0006126829      -0.0000035579   240.0022968211  -170.5738514935   -2033.2456677208     -0.0653156963    7.97  \n|   30     0.0007195372      +0.0000085736   240.0022970162  -170.5738313797   -2033.2456591472     -0.0653165778    7.96  \n|   31     0.0016341527      +0.0000192631   240.0022969796  -170.5738283616   -2033.2456398841     -0.0653169204   14.71  \n|   32     0.0017709699      -0.0000014400   240.0022966182  -170.5737585845   -2033.2456413241     -0.0653150774    8.41  \n|   33     0.0019215581      +0.0000090283   240.0022963344  -170.5738051157   -2033.2456322958     -0.0653163639    8.79  \n|   34     0.0020001474      +0.0000025398   240.0022963484  -170.5738979318   -2033.2456297560     -0.0653163029    7.95  \n|   35     0.0020483155      +0.0000021696   240.0022966230  -170.5738699621   -2033.2456275864     -0.0653166450    8.35  \n|   36     0.0020651415      +0.0000000391   240.0022966882  -170.5738026204   -2033.2456275474     -0.0653145887    8.51  \n|   37     0.0020979070      -0.0000038403   240.0022971872  -170.5738296367   -2033.2456313876     -0.0653163413    8.12  \n|   38     0.0021616833      +0.0000063941   240.0022971708  -170.5737562468   -2033.2456249935     -0.0653150898    7.95  \n|   39     0.0017288319      -0.0000145624   240.0022972140  -170.5738574833   -2033.2456395559     -0.0653174385   13.59  \n|   40     0.0017940384      +0.0000016760   240.0022974288  -170.5738874274   -2033.2456378799     -0.0653167111    7.60  \n|   41     0.0015478028      -0.0000049032   240.0022969510  -170.5736644137   -2033.2456427831     -0.0653150601    8.19  \n|   42     0.0017371097      -0.0000050555   240.0022963592  -170.5738396939   -2033.2456478386     -0.0653214213    8.04  \n|   43     0.0017942653      +0.0000092179   240.0022960670  -170.5736654335   -2033.2456386206     -0.0653103241    7.89  \n|   44     0.0017392327      +0.0000020119   240.0022959962  -170.5739279593   -2033.2456366087     -0.0653132733    7.37  \n|   45     0.0017548936      +0.0000013347   240.0022960407  -170.5737490102   -2033.2456352740     -0.0653135194    7.56  \n|   46     0.0016857588      -0.0000014118   240.0022960460  -170.5737903932   -2033.2456366858     -0.0653119799    7.61  \n|   47     0.0019168361      +0.0000060095   240.0022962849  -170.5737806410   -2033.2456306764     -0.0653128878   13.53  \n|   48     0.0018588304      +0.0000008420   240.0022961031  -170.5738377558   -2033.2456298344     -0.0653105226    7.61  \n|   49     0.0018908986      -0.0000003283   240.0022961236  -170.5738286553   -2033.2456301627     -0.0653182532    7.91  \n|   50     0.0023018921      +0.0000361433   240.0022956341  -170.5738472414   -2033.2455940194     -0.0653108386    8.37  \n|   51     0.0028325966      +0.0000063252   240.0022958605  -170.5737937496   -2033.2455876942     -0.0653164644   13.58  \n|   52     0.0028991994      -0.0000000603   240.0022950368  -170.5738645068   -2033.2455877545     -0.0653165826   13.59  \n|   53     0.0033917139      +0.0000221950   240.0022946964  -170.5738896771   -2033.2455655594     -0.0653162670   13.66  \n|   54     0.0033464005      +0.0000023255   240.0022950270  -170.5737828072   -2033.2455632340     -0.0653120631   13.65  \n|   55     0.0034088156      +0.0000028382   240.0022949853  -170.5736371788   -2033.2455603958     -0.0653130904   13.68  \n|   56     0.0033880808      -0.0000012822   240.0022950494  -170.5736530568   -2033.2455616780     -0.0653133406   13.66  \n|   57     0.0032459989      -0.0000170301   240.0022952270  -170.5734734968   -2033.2455787081     -0.0653120787   13.65  \n|   58     0.0033545712      +0.0000072697   240.0022950744  -170.5737858401   -2033.2455714384     -0.0653165873   13.68  \n|   59     0.0034738923      +0.0000076843   240.0022950317  -170.5737587232   -2033.2455637541     -0.0653144336   13.66  \n|   60     0.0037517031      +0.0000146575   240.0022949508  -170.5737580503   -2033.2455490966     -0.0653164982   13.76  \n| THRESPDP set to 4.27e-02\n|   61     0.0003670269      -0.0001457784   240.0022962074  -170.5740823646   -2033.2456948750     -0.0653129084    6.82  \n|   62     0.0001840202      -0.0000124096   240.0022959975  -170.5737281852   -2033.2457072846     -0.0653266083    5.52  \n|   63     0.0001273403      +0.0000071694   240.0022958266  -170.5743164117   -2033.2457001152     -0.0653142872    5.47  \n|   64     0.0002030431      +0.0000050527   240.0022957941  -170.5738162565   -2033.2456950625     -0.0653167365    5.22  \n|   65     0.0002780576      +0.0000052066   240.0022963090  -170.5737672760   -2033.2456898559     -0.0653163839    5.30  \n| THRESPDP set to 7.05e-04\n|   66     0.0004099758      +0.0000200273   240.0022988115  -170.5737738134   -2033.2456698286     -0.0653170176   13.47  \n|   67     0.0004460094      -0.0000065650   240.0022985618  -170.5737786116   -2033.2456763936     -0.0653170766    7.72  \n|   68     0.0004876391      -0.0000078305   240.0022983761  -170.5738545771   -2033.2456842241     -0.0653182940    7.71  \n|   69     0.0005956941      -0.0000025991   240.0022984548  -170.5738306824   -2033.2456868233     -0.0653166687    7.33  \n|   70     0.0002841792      +0.0000128185   240.0022984452  -170.5738494076   -2033.2456740048     -0.0653166512   13.51  \n|   71     0.0002266993      -0.0000062203   240.0022987382  -170.5738341871   -2033.2456802251     -0.0653169666    7.71  \n|   72     0.0002258887      -0.0000058018   240.0022988062  -170.5738439342   -2033.2456860269     -0.0653165282    7.45  \n|   73     0.0002133562      +0.0000057824   240.0022988061  -170.5738470717   -2033.2456802445     -0.0653166924    7.21  \n|   74     0.0002579012      +0.0000055282   240.0022988075  -170.5738414155   -2033.2456747164     -0.0653167394   13.50  \n|   75     0.0002046821      -0.0000052807   240.0022987241  -170.5738328483   -2033.2456799971     -0.0653168618    7.66  \n|   76     0.0003263569      +0.0000010003   240.0022984606  -170.5738263979   -2033.2456789968     -0.0653158275    8.18  \n|   77     0.0004295936      +0.0000007609   240.0022985093  -170.5738663043   -2033.2456782359     -0.0653164871    7.22  \n|   78     0.0007753157      +0.0000100548   240.0022985674  -170.5738435569   -2033.2456681811     -0.0653165001   13.48  \n|   79     0.0007659692      -0.0000000796   240.0022985313  -170.5738519694   -2033.2456682607     -0.0653166026   13.48  \n|   80     0.0006019526      -0.0000067401   240.0022985400  -170.5738666789   -2033.2456750008     -0.0653170945    7.44  \n|   81     0.0006861722      +0.0000040624   240.0022984655  -170.5738469146   -2033.2456709384     -0.0653169847    7.24  \n|   82     0.0008268011      +0.0000038244   240.0022984533  -170.5738627472   -2033.2456671141     -0.0653167616   13.51  \n|   83     0.0007546471      -0.0000033956   240.0022984163  -170.5738437445   -2033.2456705097     -0.0653169122    7.20  \n|   84     0.0008590172      +0.0000043458   240.0022985210  -170.5738421150   -2033.2456661639     -0.0653166190   13.51  \n|   85     0.0008595274      -0.0000024787   240.0022982865  -170.5738094062   -2033.2456686425     -0.0653160392    7.39  \n|   86     0.0007344450      -0.0000059232   240.0022982206  -170.5738541679   -2033.2456745657     -0.0653159597    7.41  \n|   87     0.0006862546      -0.0000065441   240.0022981143  -170.5737708967   -2033.2456811098     -0.0653155305    7.35  \n|   88     0.0006542696      +0.0000032656   240.0022980189  -170.5738564900   -2033.2456778442     -0.0653131425    7.71  \n|   89     0.0006574999      -0.0000046895   240.0022979298  -170.5738362063   -2033.2456825338     -0.0653158159    7.46  \n|   90     0.0007496833      +0.0000015357   240.0022978913  -170.5738082852   -2033.2456809981     -0.0653150699    7.21  \n|   91     0.0008772891      +0.0000151657   240.0022978657  -170.5738185530   -2033.2456658324     -0.0653149674   13.49  \n|   92     0.0008182025      +0.0000022474   240.0022978698  -170.5736894614   -2033.2456635850     -0.0653139062    7.70  \n|   93     0.0007495725      -0.0000018515   240.0022979748  -170.5738456208   -2033.2456654365     -0.0653138570    7.60  \n|   94     0.0006790543      -0.0000057223   240.0022978449  -170.5737503189   -2033.2456711588     -0.0653141158    7.63  \n|   95     0.0006166209      -0.0000051394   240.0022963099  -170.5737807957   -2033.2456762982     -0.0653158030    7.65  \n|   96     0.0006720018      +0.0000026309   240.0022962074  -170.5738585712   -2033.2456736673     -0.0653141261    7.97  \n|   97     0.0007685339      -0.0000001324   240.0022960622  -170.5738294195   -2033.2456737997     -0.0653160922    8.00  \n|   98     0.0007935668      +0.0000036180   240.0022963237  -170.5737984570   -2033.2456701816     -0.0653143700    7.77  \n|   99     0.0016846788      +0.0000253947   240.0022962728  -170.5737976852   -2033.2456447870     -0.0653150537   13.54  \n|  100     0.0016776373      +0.0000008299   240.0022962333  -170.5738192787   -2033.2456439571     -0.0653145688    7.69  \n|  101     0.0019332034      +0.0000120141   240.0022957965  -170.5738005755   -2033.2456319430     -0.0653156060    8.22  \nReached max number of SCF iterations (maxit = 100)\nSCF did not converge\nTry to decrease the coulomb and exchange integral screening thresholds by setting\n'threall' to 1.0e-12 or even 1.0e-13. If it does not help, try pure double precision\ninstead of mixed (default) or single precision\nAlso try 'scf diis+a' convergence algorithm if you're using the default.\nWriting out molden info\nterachem[0x620360]\nterachem[0x609eee]\nterachem[0x6d2d6a]\nterachem[0x6e74a9]\n/usr/lib/x86_64-linux-gnu/libc.so.6(+0x29d90)[0x7f649d601d90]\n/usr/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0x80)[0x7f649d601e40]\nterachem[0x43d325]\n-------------------------------------------------------------------------------------------------------------------------\nFINAL ENERGY: -2033.2456319430 a.u.\n| WARNING: Final energy is higher than the lowest energy by   7.5342e-05.\nDISPERSION CONTRIBUTION TO ENERGY: -0.0174732835 a.u.\nC-PCM contribution to final energy:-0.0653156060 a.u. ( already included in final energy )\nComputing C-PCM contribution to gradient...\nHOMO-LUMO GAP: alpha: 8.877 eV\n               beta:  8.877 eV \nCENTER OF MASS: {-0.050327, -0.021782, -0.055534} ANGS\nDIPOLE MOMENT: {4.464966, -0.240096, -2.708212} (|D| = 5.227617) DEBYE\nSPIN SZ:         0.000000\nSPIN S-SQUARED: 0.000000 (exact: 0.00)\nDIE called at line number 2842 in file terachem/energy.cpp\n\n Job terminated: Wed Jul 10 01:45:22 2024\n\n\n</code>\n</pre> <pre><code>\n</code></pre>"},{"location":"visualizations/results/#quickly-view-and-understand-your-results","title":"Quickly view and understand your results","text":""},{"location":"visualizations/results/#easily-see-when-calculations-fail-and-inspect-deeper","title":"Easily see when calculations fail and inspect deeper","text":""},{"location":"visualizations/structure/","title":"Structure","text":"<pre><code>from qcio import Structure, view\n\n# Defaults changed just to fit within narrow documentation layout\nview.DEFAULT_WIDTH = 400\nview.DEFAULT_HEIGHT = 300\n</code></pre> <pre><code>caffeine = Structure.from_smiles('CN1C=NC2=C1C(=O)N(C(=O)N2C)C')\nview.view(caffeine)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>serotonin = Structure.from_smiles(\"C1=CC2=C(C=C1O)C(=CN2)CCN\")\ndopamine = Structure.from_smiles(\"NCCc1cc(O)c(O)cc1\")\nview.view(serotonin, dopamine)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>serotonin.add_identifiers({\"name\": \"Serotonin\"})\ndopamine.add_identifiers({\"name\": \"Dopamine\"})\nview.view(serotonin, dopamine)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>epinephrine = Structure.from_smiles(\"CNC[C@H](O)c1ccc(O)c(O)c1\")\nglutamate = Structure.from_smiles(\"C(CC(=O)O)[C@@H](C(=O)[O-])N\")\nview.view(\n    epinephrine,\n    glutamate,\n    titles=[\"Good morning \u2600\ufe0f\", \"Glutamate \ud83e\uddea\"],\n    subtitles=[\"\", f\"Charge: {glutamate.charge} Multiplicity: {glutamate.multiplicity}\"],\n)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>view.view(\n    epinephrine, \n    titles=[\"Epinephrine\"], \n    show_indices=True\n)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p> <pre><code>view.view(\n    epinephrine, \n    titles=[\"Epinephrine\"], \n    distances=[(17,25), (20, 21)], \n    length_unit=\"angstrom\"\n)\n</code></pre> <p>3Dmol.js failed to load for some reason.  Please check your browser console for error messages.</p>"},{"location":"visualizations/structure/#easily-view-and-interact-with-any-structure","title":"Easily view and interact with any structure","text":""},{"location":"visualizations/structure/#pass-any-number-of-objects-of-any-type-to-view","title":"Pass any number of objects (of any type) to view","text":""},{"location":"visualizations/structure/#titles-are-generated-automatically-from-identifier-information","title":"Titles are generated automatically from identifier information","text":""},{"location":"visualizations/structure/#or-manually-add-titles-or-subtitles","title":"Or manually add titles or subtitles","text":""},{"location":"visualizations/structure/#show-atom-indices-zero-indexed","title":"Show Atom Indices (Zero Indexed)","text":""},{"location":"visualizations/structure/#measure-distances-between-atoms","title":"Measure Distances Between Atoms","text":""}]}